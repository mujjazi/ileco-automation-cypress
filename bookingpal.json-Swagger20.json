{
  "swagger": "2.0",
  "info": {
    "version": "3.2",
    "title": "Channel Management API",
    "description": "![example image](https://i.ibb.co/7bqPkGJ/PMS-integration-workflow.png \"An exemplary image\")\n\n**Before beginning work it is necessary that:**\n\n  * Your organization is registered and activated\n  * You have participated in a kickÂ­off meeting\n  * The opening questionnaire has been filled out\n  * You have your login and password. (Using it you get a unique session `token` that must be used in every request to API as param `jwt`)\n\n[Contact us](https://bookingpal.com/en/contact-us/) to be registered and get your credentials.\n\nAll responses are returned as JSON.\n\nThis document covers all the API calls and other methods that can be used to complete Razor-Cloud integration. It is important to note that all parameters are **case sensitive** in this document and should be used as documented.\n\n**Responses:**\nWhen a request is successful, a response body will typically be sent back in the form of a JSON object. An exception to this is when a DELETE request is processed, which will result in a successful `200` status and an empty response body.",
    "contact": {}
  },
  "host": "apidemo.mybookingpal.com",
  "basePath": "/",
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "description": "Token which need to be passed in every request as GET parameter. You will get this token in authorization response. Token is valid 1 hour.",
      "name": "jwt",
      "in": "query"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/authc/login": {
      "get": {
        "description": "In order to begin utilizing the platform APIs, your application must be authenticated and authorized to access domain resources. Follow the URL with your credentials and obtain an authorization token which is used in every request.\nYou will have 2 types of tokens. One is on the PMS level, and this one should be used when you send requests related to PMS/PM data. For managing properties, you will need a token on PM level, with PM credentials. For every API call it will be noted which API credentials you should use.",
        "summary": "Login",
        "tags": [
          "Authorization"
        ],
        "operationId": "Login",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Your account email address (for PMS or PM)"
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Your password"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Authorization"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "token": "a9eaf5b0-c433-450e-991d-8011fc4aa264",
                "partyId": 61692799,
                "organizationId": 61690131,
                "name": "Update Name",
                "currency": "USD",
                "supplierId": 61692799
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pmlist": {
      "get": {
        "description": "This API call will return a list of property managers (PM) that have been created in the BookingPal platform that is associated with your PMS.\nIn all requests in this API section, you need to use your PMS credentials.",
        "summary": "PMs list",
        "tags": [
          "Property Managers"
        ],
        "operationId": "PMslist",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetPMslist"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "id": 61690133,
                    "name": "Test name",
                    "extraName": "Test fullname",
                    "emailAddress": "test001@gmail.com"
                  },
                  {
                    "id": 61690517,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa002@gmail.com"
                  },
                  {
                    "id": 61690534,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa003@gmail.com"
                  },
                  {
                    "id": 61691075,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa004@gmail.com"
                  },
                  {
                    "id": 61691076,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa005@gmail.com"
                  },
                  {
                    "id": 61691729,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa103@gmail.com"
                  },
                  {
                    "id": 61691731,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "te@gmail.com"
                  },
                  {
                    "id": 61691732,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "testa026@gmail.com"
                  },
                  {
                    "id": 61691733,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa027@gmail.com"
                  },
                  {
                    "id": 61691734,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa028@gmail.com"
                  },
                  {
                    "id": 61691735,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa029@gmail.com"
                  },
                  {
                    "id": 61691736,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "testa0031@gmail.com"
                  },
                  {
                    "id": 61691737,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "testa0032@gmail.com"
                  },
                  {
                    "id": 61691803,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "testa035@gmail.com"
                  },
                  {
                    "id": 61691852,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa036@gmail.com"
                  },
                  {
                    "id": 61691861,
                    "name": "Auto-lyxpz company name",
                    "extraName": "Auto-dzvjr full name",
                    "emailAddress": "wnvuyqfya213@pqclbzs.rli"
                  },
                  {
                    "id": 61691868,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "testa038@gmail.com"
                  },
                  {
                    "id": 61691875,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM001@gmail.com"
                  },
                  {
                    "id": 61691876,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM002@gmail.com"
                  },
                  {
                    "id": 61691877,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM003@gmail.com"
                  },
                  {
                    "id": 61691878,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM004@gmail.com"
                  },
                  {
                    "id": 61691879,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM005@gmail.com"
                  },
                  {
                    "id": 61691880,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM006@gmail.com"
                  },
                  {
                    "id": 61691881,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM007@gmail.com"
                  },
                  {
                    "id": 61691882,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM008@gmail.com"
                  },
                  {
                    "id": 61691883,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM009@gmail.com"
                  },
                  {
                    "id": 61691884,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM010@gmail.com"
                  },
                  {
                    "id": 61691885,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM011@gmail.com"
                  },
                  {
                    "id": 61691886,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM012@gmail.com"
                  },
                  {
                    "id": 61691887,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM014@gmail.com"
                  },
                  {
                    "id": 61691888,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM015@gmail.com"
                  },
                  {
                    "id": 61691889,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM016@gmail.com"
                  },
                  {
                    "id": 61691896,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM017@gmail.com"
                  },
                  {
                    "id": 61691897,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM018@gmail.com"
                  },
                  {
                    "id": 61691898,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM019@gmail.com"
                  },
                  {
                    "id": 61691899,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM020@gmail.com"
                  },
                  {
                    "id": 61691900,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM021@gmail.com"
                  },
                  {
                    "id": 61691903,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa0141234@gmail.com"
                  },
                  {
                    "id": 61691904,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa01412345@gmail.com"
                  },
                  {
                    "id": 61691905,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM022@gmail.com"
                  },
                  {
                    "id": 61691906,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM023@gmail.com"
                  },
                  {
                    "id": 61691907,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa014123452@gmail.com"
                  },
                  {
                    "id": 61691908,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa0141234521@gmail.com"
                  },
                  {
                    "id": 61691909,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM024@gmail.com"
                  },
                  {
                    "id": 61691910,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM025@gmail.com"
                  },
                  {
                    "id": 61691911,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM026@gmail.com"
                  },
                  {
                    "id": 61691979,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM028@gmail.com"
                  },
                  {
                    "id": 61692003,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM030@gmail.com"
                  },
                  {
                    "id": 61692065,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM031@gmail.com"
                  },
                  {
                    "id": 61692066,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM032@gmail.com"
                  },
                  {
                    "id": 61692067,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM033@gmail.com"
                  },
                  {
                    "id": 61692068,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "TestPM034@gmail.com"
                  },
                  {
                    "id": 61692418,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM01130@gmail.com"
                  },
                  {
                    "id": 61692455,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM035@gmail.com"
                  },
                  {
                    "id": 61692456,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM036@gmail.com"
                  },
                  {
                    "id": 61692457,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM037@gmail.com"
                  },
                  {
                    "id": 61692552,
                    "name": "Update Name",
                    "extraName": "Update Full Name",
                    "emailAddress": "TestPM038@gmail.com"
                  },
                  {
                    "id": 61692554,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM999MJ@gmail.com"
                  },
                  {
                    "id": 61692695,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "testa133@gmail.com"
                  },
                  {
                    "id": 61692769,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM050@gmail.com"
                  },
                  {
                    "id": 61692782,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPMCreateProduct@gmail.com"
                  },
                  {
                    "id": 61692785,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM055@gmail.com"
                  },
                  {
                    "id": 61692787,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM056@gmail.com"
                  },
                  {
                    "id": 61692789,
                    "name": "Test",
                    "extraName": "Test",
                    "emailAddress": "TestPM057@gmail.com"
                  },
                  {
                    "id": 61692790,
                    "name": "Test Wiz",
                    "extraName": "Test Wiz",
                    "emailAddress": "TestPM058@gmail.com"
                  },
                  {
                    "id": 61692791,
                    "name": "Test wiz1",
                    "extraName": "Test wiz1",
                    "emailAddress": "TestPM059@gmail.com"
                  },
                  {
                    "id": 61692793,
                    "name": "Test wiz1",
                    "extraName": "Test wiz1",
                    "emailAddress": "TestPM060@gmail.com"
                  },
                  {
                    "id": 61692794,
                    "name": "Test wiz1",
                    "extraName": "Test wiz1",
                    "emailAddress": "TestPM061@gmail.com"
                  },
                  {
                    "id": 61692795,
                    "name": "Test wiz",
                    "extraName": "Test wiz",
                    "emailAddress": "TestPM062@gmail.com"
                  },
                  {
                    "id": 61692797,
                    "name": "Wizard Demo",
                    "extraName": "Wizard Demo",
                    "emailAddress": "wizarddemo@gmail.com"
                  },
                  {
                    "id": 61692799,
                    "name": "Test PM",
                    "extraName": "Test PM",
                    "emailAddress": "apimaticTest@test.com"
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/pm": {
      "post": {
        "description": "This API call will allow the PMS to pass all data to BookingPal that is required for registering a new PM (Property Manager). All fields are mandatory - PMS must pass this data in order for a PM account to be created. You need to use PMS credentials for this request.",
        "summary": "Create new Property Manager",
        "tags": [
          "Property Managers"
        ],
        "operationId": "CreatenewPropertyManager",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Createnew~1UpdatePropertyManagerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyManagerdetailsresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "companyDetails": {
                      "accountId": "132",
                      "companyName": "Test PM",
                      "language": "en",
                      "fullName": "Test PM",
                      "companyAddress": {
                        "country": "US",
                        "state": "Test State",
                        "streetAddress": "Test Street",
                        "city": "Test City",
                        "zip": "13245"
                      },
                      "website": "www.testsite.com",
                      "email": "apimaticPMemail@test.com",
                      "phone": {
                        "countryCode": "+321",
                        "number": "132456"
                      },
                      "password": "password",
                      "currency": "USD"
                    },
                    "policies": {
                      "paymentPolicy": {
                        "type": "SPLIT",
                        "splitPayment": {
                          "depositType": "FLAT",
                          "value": 4,
                          "secondPaymentDays": 30
                        }
                      },
                      "cancellationPolicy": {
                        "type": "MANUAL",
                        "manualPolicy": {
                          "type": "FLAT",
                          "manualPolicies": [
                            {
                              "chargeValue": 20,
                              "beforeDays": 34,
                              "cancellationFee": 1
                            },
                            {
                              "chargeValue": 12,
                              "beforeDays": 45,
                              "cancellationFee": 2
                            }
                          ]
                        }
                      },
                      "feeTaxMandatory": {
                        "isFeeMandatory": true,
                        "isTaxMandatory": true
                      },
                      "terms": "www.test.com",
                      "checkInTime": "10:00:00",
                      "checkOutTime": "16:00:00",
                      "leadTime": 2
                    },
                    "payment": {
                      "paymentType": "MAIL_CHECK",
                      "creditCard": {
                        "creditCardType": "POST",
                        "creditCardList": [
                          "AMERICAN_EXPRESS",
                          "DINERS_CLUB",
                          "DISCOVER",
                          "MASTER_CARD",
                          "VISA"
                        ],
                        "paymentGateways": {
                          "paymentGatewaysType": "AUTHORIZE_NET"
                        }
                      }
                    },
                    "id": 61692801
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/pm/{id}": {
      "get": {
        "description": "This function will return a property managerâs details that belong to the current user. You need to use your PMS API credentials. \n\nRequest Body parameters are the same as for creating PM.\n\nResponse is the same as in creating a Property Manager function. Here you do not need to pass all root level fields, but if some are used - all fields inside are mandatory:\n- in CompanyDetails Model you can pass any field, and none of them is mandatory\n- in Policies Model - you can pass any field,  and none of them is mandatory\n- if you do use PaymentPolicy - all fields inside are mandatory\n- if you do use CancellationPolicy - all fields inside are mandatory\n- if you use Payment Model - all fields inside are mandatory",
        "summary": "Get Property Manager detail data",
        "tags": [
          "Property Managers"
        ],
        "operationId": "GetPropertyManagerdetaildata",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Property Manager ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyManagerdetailsresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "companyDetails": {
                      "accountId": "132",
                      "companyName": "Test PM",
                      "language": "en",
                      "fullName": "Test PM",
                      "companyAddress": {
                        "country": "US",
                        "state": "Test State",
                        "streetAddress": "Test Street",
                        "city": "Test City",
                        "zip": "13245"
                      },
                      "website": "www.testsite.com",
                      "email": "apimaticTest@test.com",
                      "phone": {
                        "countryCode": "+321",
                        "number": "132456"
                      },
                      "currency": "USD"
                    },
                    "policies": {
                      "paymentPolicy": {
                        "type": "SPLIT",
                        "splitPayment": {
                          "depositType": "FLAT",
                          "value": 4,
                          "secondPaymentDays": 30
                        }
                      },
                      "cancellationPolicy": {
                        "type": "MANUAL",
                        "manualPolicy": {
                          "type": "FLAT",
                          "manualPolicies": [
                            {
                              "chargeValue": 20,
                              "beforeDays": 34,
                              "cancellationFee": 1
                            },
                            {
                              "chargeValue": 12,
                              "beforeDays": 45,
                              "cancellationFee": 2
                            }
                          ]
                        }
                      },
                      "feeTaxMandatory": {
                        "isFeeMandatory": true,
                        "isTaxMandatory": true
                      },
                      "terms": "www.test.com",
                      "checkInTime": "10:00:00",
                      "checkOutTime": "16:00:00",
                      "leadTime": 2
                    },
                    "payment": {
                      "paymentType": "MAIL_CHECK",
                      "creditCard": {
                        "creditCardType": "POST",
                        "creditCardList": [
                          "AMERICAN_EXPRESS",
                          "DINERS_CLUB",
                          "DISCOVER",
                          "MASTER_CARD",
                          "VISA"
                        ],
                        "paymentGateways": {
                          "paymentGatewaysType": "AUTHORIZE_NET"
                        }
                      }
                    },
                    "id": 61692799
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "put": {
        "description": "This function will update a property managerâs details. In case of an update you do not need to pass all information, but if you have values in one section - all fields inside are mandatory.",
        "summary": "Update Property Manager details",
        "tags": [
          "Property Managers"
        ],
        "operationId": "UpdatePropertyManagerdetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Createnew~1UpdatePropertyManagerRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Property Manager ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyManagerdetailsresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "companyDetails": {
                      "accountId": "132",
                      "companyName": "Update Name",
                      "language": "en",
                      "fullName": "Update Full Name",
                      "companyAddress": {
                        "country": "US",
                        "state": "Update State",
                        "streetAddress": "Update Street",
                        "city": "Update City",
                        "zip": "13245"
                      },
                      "website": "www.updatesite.com",
                      "email": "apimaticTest@test.com",
                      "phone": {
                        "countryCode": "+321",
                        "number": "132456"
                      },
                      "currency": "USD"
                    },
                    "policies": {
                      "paymentPolicy": {
                        "type": "SPLIT",
                        "splitPayment": {
                          "depositType": "FLAT",
                          "value": 4,
                          "secondPaymentDays": 30
                        }
                      },
                      "cancellationPolicy": {
                        "type": "MANUAL",
                        "manualPolicy": {
                          "type": "FLAT",
                          "manualPolicies": [
                            {
                              "chargeValue": 20,
                              "beforeDays": 34,
                              "cancellationFee": 1
                            },
                            {
                              "chargeValue": 12,
                              "beforeDays": 45,
                              "cancellationFee": 2
                            }
                          ]
                        }
                      },
                      "feeTaxMandatory": {
                        "isFeeMandatory": true,
                        "isTaxMandatory": true
                      },
                      "terms": "www.test.com",
                      "checkInTime": "10:00:00",
                      "checkOutTime": "16:00:00",
                      "leadTime": 2
                    },
                    "payment": {
                      "paymentType": "MAIL_CHECK",
                      "creditCard": {
                        "creditCardType": "POST",
                        "creditCardList": [
                          "AMERICAN_EXPRESS",
                          "DINERS_CLUB",
                          "DISCOVER",
                          "MASTER_CARD",
                          "VISA"
                        ],
                        "paymentGateways": {
                          "paymentGatewaysType": "AUTHORIZE_NET"
                        }
                      }
                    },
                    "id": 61692799
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/product": {
      "get": {
        "description": "This API call will return a list of properties that belong to the current user. This means that a user has to be logged in with products created already.\nEvery API call in this section should be with PM credentials.",
        "summary": "Get product list",
        "tags": [
          "Product"
        ],
        "operationId": "Getproductlist",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Productresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "name": "Apimatic Test",
                    "id": 1235124634,
                    "supplierId": 61692799,
                    "rooms": 5,
                    "bathrooms": 4,
                    "toilets": 2,
                    "totalBeds": 6,
                    "space": 111,
                    "spaceUnit": "SQ_FT",
                    "persons": 10,
                    "childs": 2,
                    "latitude": 41.886125,
                    "longitude": -87.634233,
                    "livingRoom": 2,
                    "altId": 23556,
                    "notes": {
                      "description": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "Main description on EN!"
                          },
                          {
                            "language": "ES",
                            "value": "Main description on ES!"
                          }
                        ]
                      },
                      "shortDescription": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "IT",
                            "value": "House Rules on IT!"
                          }
                        ]
                      },
                      "houseRules": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "SR",
                            "value": "House Rules on SR!"
                          }
                        ]
                      },
                      "name": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "FR",
                            "value": "House Rules on FR!"
                          }
                        ]
                      },
                      "finePrint": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "SR",
                            "value": "House Rules on SR!"
                          }
                        ]
                      }
                    },
                    "attributesWithQuantity": [
                      {
                        "attributeId": "HAC312",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA19",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA273",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA32",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA41",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA5085",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA68",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA88",
                        "quantity": 1
                      }
                    ],
                    "nearbyAmenities": [],
                    "propertyType": "PCT34",
                    "bedroomConfiguration": {
                      "bedrooms": [
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA86",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": true
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Living Room",
                          "privateBathroom": false
                        }
                      ]
                    },
                    "checkInTime": "16:00:00",
                    "checkInToTime": "20:00:00",
                    "checkOutTime": "10:00:00",
                    "currency": "EUR",
                    "policy": {
                      "internetPolicy": {
                        "accessInternet": true,
                        "kindOfInternet": "WiFi",
                        "availableInternet": "AllAreas",
                        "chargeInternet": "Free"
                      },
                      "parkingPolicy": {
                        "accessParking": true,
                        "locatedParking": "OnSite",
                        "privateParking": true,
                        "chargeParking": "$ 150",
                        "timeCostParking": "PerStay",
                        "necessaryReservationParking": "NotPossible"
                      },
                      "petPolicy": {
                        "allowedPets": "Allowed",
                        "chargePets": "Free"
                      },
                      "childrenAllowed": true,
                      "smokingAllowed": false
                    },
                    "location": {
                      "postalCode": "60606",
                      "country": "US",
                      "region": "Illinois",
                      "city": "Chicago",
                      "street": "210 North Wells Street",
                      "zipCode9": "60606-1330"
                    },
                    "supportedLosRates": false
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "description": "This function allows a logged in user to create new product. You can only send one product in each request. \r\n",
        "summary": "Create product",
        "tags": [
          "Product"
        ],
        "operationId": "Createproduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Create~1UpdatePropertyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Productresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "name": "Apimatic Test",
                    "id": 1235124634,
                    "supplierId": 61692799,
                    "rooms": 5,
                    "bathrooms": 4,
                    "toilets": 2,
                    "totalBeds": 6,
                    "space": 111,
                    "spaceUnit": "SQ_FT",
                    "persons": 10,
                    "childs": 2,
                    "latitude": 41.886125,
                    "longitude": -87.634233,
                    "livingRoom": 2,
                    "altId": 23556,
                    "notes": {
                      "description": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "Main description on EN!"
                          },
                          {
                            "language": "ES",
                            "value": "Main description on ES!"
                          }
                        ]
                      },
                      "shortDescription": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "IT",
                            "value": "House Rules on IT!"
                          }
                        ]
                      },
                      "houseRules": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "SR",
                            "value": "House Rules on SR!"
                          }
                        ]
                      },
                      "name": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "FR",
                            "value": "House Rules on FR!"
                          }
                        ]
                      },
                      "finePrint": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "SR",
                            "value": "House Rules on SR!"
                          }
                        ]
                      }
                    },
                    "attributesWithQuantity": [
                      {
                        "attributeId": "HAC312",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA19",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA273",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA32",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA41",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA5085",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA68",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA88",
                        "quantity": 1
                      }
                    ],
                    "nearbyAmenities": [],
                    "propertyType": "PCT34",
                    "bedroomConfiguration": {
                      "bedrooms": [
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA86",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": true
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Living Room",
                          "privateBathroom": false
                        }
                      ]
                    },
                    "checkInTime": "16:00:00",
                    "checkInToTime": "20:00:00",
                    "checkOutTime": "10:00:00",
                    "currency": "EUR",
                    "policy": {
                      "internetPolicy": {
                        "accessInternet": true,
                        "kindOfInternet": "WiFi",
                        "availableInternet": "AllAreas",
                        "chargeInternet": "Free"
                      },
                      "parkingPolicy": {
                        "accessParking": true,
                        "locatedParking": "OnSite",
                        "privateParking": true,
                        "chargeParking": "$ 150",
                        "timeCostParking": "PerStay",
                        "necessaryReservationParking": "NotPossible"
                      },
                      "petPolicy": {
                        "allowedPets": "Allowed",
                        "chargePets": "Free"
                      },
                      "childrenAllowed": true,
                      "smokingAllowed": false
                    },
                    "location": {
                      "postalCode": "60606",
                      "country": "US",
                      "region": "Illinois",
                      "city": "Chicago",
                      "street": "210 North Wells Street",
                      "zipCode9": "60606-1330"
                    },
                    "supportedLosRates": false
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "put": {
        "description": "This function allows a logged in user to update product details.\n\nRequest parameters and request example will be the same as in the create product API. The only field that must be added is the product id.\n\nYou need to have all other parameters which were used in the create API call that you want to keep (AltID canât be updated). Everything that you do not send as an update will be deleted (overwritten).\n\nResponse parameters and response examples are the same as in the create product API.",
        "summary": "Update product",
        "tags": [
          "Product"
        ],
        "operationId": "Updateproduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Create~1UpdatePropertyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Productresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "name": "Name Updated",
                    "id": 1235124634,
                    "supplierId": 61692799,
                    "rooms": 3,
                    "bathrooms": 6,
                    "toilets": 6,
                    "totalBeds": 6,
                    "space": 66,
                    "spaceUnit": "SQ_M",
                    "persons": 6,
                    "childs": 6,
                    "latitude": 41.8860812,
                    "longitude": -87.634233,
                    "livingRoom": 6,
                    "notes": {
                      "description": {
                        "texts": [
                          {
                            "language": "FR",
                            "value": "Main description in FR!"
                          },
                          {
                            "language": "SR",
                            "value": "Main description in RO!"
                          }
                        ]
                      },
                      "houseRules": {
                        "texts": [
                          {
                            "language": "RO",
                            "value": "House Rules in RO!"
                          },
                          {
                            "language": "SK",
                            "value": "House Rules in SK!"
                          }
                        ]
                      }
                    },
                    "attributesWithQuantity": [
                      {
                        "attributeId": "RMA149",
                        "quantity": 1
                      }
                    ],
                    "nearbyAmenities": [
                      {
                        "attributeId": "ACC203",
                        "distance": 3
                      }
                    ],
                    "propertyType": "PCT101",
                    "bedroomConfiguration": {
                      "bedrooms": [
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA6118",
                                "count": 2
                              },
                              {
                                "bedType": "RMA6120",
                                "count": 4
                              }
                            ]
                          },
                          "type": "Living Room",
                          "privateBathroom": true
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA102",
                                "count": 2
                              },
                              {
                                "bedType": "RMA58",
                                "count": 2
                              },
                              {
                                "bedType": "RMA6119",
                                "count": 3
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": true
                        }
                      ]
                    },
                    "checkInTime": "17:00:00",
                    "checkInToTime": "21:00:00",
                    "checkOutTime": "11:00:00",
                    "currency": "RSD",
                    "policy": {
                      "internetPolicy": {
                        "accessInternet": true,
                        "kindOfInternet": "Wired",
                        "availableInternet": "SomeRooms",
                        "chargeInternet": "$ 1000"
                      },
                      "parkingPolicy": {
                        "accessParking": true,
                        "locatedParking": "Nearby",
                        "privateParking": false,
                        "chargeParking": "$ 100",
                        "timeCostParking": "PerHour",
                        "necessaryReservationParking": "NotPossible"
                      },
                      "petPolicy": {
                        "allowedPets": "NotAllowed",
                        "chargePets": "$ 10"
                      },
                      "childrenAllowed": false,
                      "smokingAllowed": false
                    },
                    "location": {
                      "postalCode": "60606",
                      "country": "US",
                      "region": "Illinois",
                      "city": "Chicago",
                      "street": "210 North Wells Street",
                      "zipCode9": "60606-1330"
                    },
                    "supportedLosRates": true
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "This function allows logged in user to delete list of products.\r\n",
        "summary": "Delete list product",
        "tags": [
          "Product"
        ],
        "operationId": "Deletelistproduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Product with ids [1235124636, 1235124637] was deleted",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/product/{productId}": {
      "get": {
        "description": "This function allows logged in user to get a specific product.",
        "summary": "Get product by ID",
        "tags": [
          "Product"
        ],
        "operationId": "GetproductbyID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Id of the property"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Productresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "name": "Apimatic Test",
                    "id": 1235124634,
                    "supplierId": 61692799,
                    "rooms": 5,
                    "bathrooms": 4,
                    "toilets": 2,
                    "totalBeds": 6,
                    "space": 111,
                    "spaceUnit": "SQ_FT",
                    "persons": 10,
                    "childs": 2,
                    "latitude": 41.886125,
                    "longitude": -87.634233,
                    "livingRoom": 2,
                    "notes": {
                      "description": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "Main description on EN!"
                          },
                          {
                            "language": "ES",
                            "value": "Main description on ES!"
                          }
                        ]
                      },
                      "houseRules": {
                        "texts": [
                          {
                            "language": "EN",
                            "value": "House Rules on EN!"
                          },
                          {
                            "language": "SR",
                            "value": "House Rules on SR!"
                          }
                        ]
                      }
                    },
                    "attributesWithQuantity": [
                      {
                        "attributeId": "HAC312",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA107",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA11",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA149",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA163",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA18",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA19",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA251",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA273",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA32",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA41",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA5085",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA59",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA6058",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA68",
                        "quantity": 1
                      },
                      {
                        "attributeId": "RMA88",
                        "quantity": 1
                      }
                    ],
                    "nearbyAmenities": [],
                    "propertyType": "PCT34",
                    "bedroomConfiguration": {
                      "bedrooms": [
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              },
                              {
                                "bedType": "RMA86",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA113",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": false
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Bedroom",
                          "privateBathroom": true
                        },
                        {
                          "beds": {
                            "bed": [
                              {
                                "bedType": "RMA58",
                                "count": 1
                              }
                            ]
                          },
                          "type": "Living Room",
                          "privateBathroom": false
                        }
                      ]
                    },
                    "checkInTime": "16:00:00",
                    "checkInToTime": "20:00:00",
                    "checkOutTime": "10:00:00",
                    "currency": "EUR",
                    "policy": {
                      "internetPolicy": {
                        "accessInternet": true,
                        "kindOfInternet": "WiFi",
                        "availableInternet": "AllAreas",
                        "chargeInternet": "Free"
                      },
                      "parkingPolicy": {
                        "accessParking": true,
                        "locatedParking": "OnSite",
                        "privateParking": true,
                        "chargeParking": "$ 150",
                        "timeCostParking": "PerStay",
                        "necessaryReservationParking": "NotPossible"
                      },
                      "petPolicy": {
                        "allowedPets": "Allowed",
                        "chargePets": "Free"
                      },
                      "childrenAllowed": true,
                      "smokingAllowed": false
                    },
                    "location": {
                      "postalCode": "60606",
                      "country": "US",
                      "region": "Illinois",
                      "city": "Chicago",
                      "street": "210 North Wells Street",
                      "zipCode9": "60606-1330"
                    },
                    "supportedLosRates": false
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "This function allows the logged in user to delete product.",
        "summary": "Delete product",
        "tags": [
          "Product"
        ],
        "operationId": "Deleteproduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Property ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Product with id 1235124636 was deleted",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/product/activation": {
      "post": {
        "description": "This function allows logged in user to activate a list of products in BookingPal. Products MUST be activated successfully before they can be distributed to any channel. \n\nNote: When a product is successfully activated it will be queued for the internal BP validation function and you will receive async push messages when the validation is completed - like it is described in the Validation section.",
        "summary": "Activation list product",
        "tags": [
          "Product"
        ],
        "operationId": "Activationlistproduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Property with ids [1235124634, 1235124636] will be put in Queue for validation. Please expect response over push message.",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/product/deactivation": {
      "post": {
        "description": "This function allows the logged in user to deactivate a list of products. This function will also close the calendars on every channel the products have been listed on.",
        "summary": "Deactivation list product",
        "tags": [
          "Product"
        ],
        "operationId": "Deactivationlistproduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Product with ids [1235124634, 1235124636] are Deactivated!",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/image/{productId}": {
      "get": {
        "description": "This function allows logged in user to get image list for the existing product",
        "summary": "Get image list by product ID",
        "tags": [
          "Images"
        ],
        "operationId": "GetimagelistbyproductID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the property"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetimagelistbyproductID"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "images": [
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069098.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069098.jpg",
                        "sort": 1
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069099.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069099.jpg",
                        "sort": 2
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069100.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069100.jpg",
                        "sort": 3
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069101.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069101.jpg",
                        "sort": 4
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069102.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069102.jpg",
                        "sort": 5
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069103.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069103.jpg",
                        "sort": 6
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069104.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069104.jpg",
                        "sort": 7
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069105.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069105.jpg",
                        "sort": 8
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069106.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069106.jpg",
                        "sort": 9
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069107.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069107.jpg",
                        "sort": 10
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069108.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069108.jpg",
                        "sort": 11
                      },
                      {
                        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069109.jpg",
                        "tags": [
                          4,
                          5,
                          6
                        ],
                        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069109.jpg",
                        "sort": 12
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "This function allows logged in user to delete images.",
        "summary": "Delete all images per property",
        "tags": [
          "Images"
        ],
        "operationId": "Deleteallimagesperproperty",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of property for which you want to delete all images"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Your request was received and put in queue",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": []
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/image": {
      "post": {
        "description": "This function allows the logged in user to upload images for the existing product. Every new image will be sorted to the end. The first image sent will be used as the âMain Imageâ. (Image re-ordering can also be done within the BookingPal platform manually by users)",
        "summary": "Create images",
        "tags": [
          "Images"
        ],
        "operationId": "Createimages",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateimagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Your request was received and put in queue",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "This function allows the logged in user to delete image(s) from the existing product.",
        "summary": "Delete list of images",
        "tags": [
          "Images"
        ],
        "operationId": "Deletelistofimages",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeletelistofimagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Images are sent for processing!",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": []
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/ra/{productId}": {
      "get": {
        "description": "This function allows logged in users to get rates and availability for the specific product.\nEvery API call in this section should be with PM credentials.",
        "summary": "Get rates and availability product ID",
        "tags": [
          "Rates and Availability"
        ],
        "operationId": "GetratesandavailabilityproductID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the property"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RatesAvailabilityresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "leadTime": 2,
                    "rates": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "amount": 137
                      }
                    ],
                    "minStays": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "minStay": 5
                      }
                    ],
                    "maxStays": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "maxStay": 20
                      }
                    ],
                    "restrictions": [
                      {
                        "beginDate": "2020-03-23",
                        "endDate": "2021-01-25",
                        "checkIn": {
                          "monday": false,
                          "tuesday": false,
                          "wednesday": false,
                          "thursday": false,
                          "friday": false,
                          "saturday": true,
                          "sunday": true
                        },
                        "checkOut": {
                          "monday": false,
                          "tuesday": false,
                          "wednesday": false,
                          "thursday": false,
                          "friday": false,
                          "saturday": true,
                          "sunday": true
                        }
                      },
                      {
                        "beginDate": "2021-01-25",
                        "endDate": "2021-02-01",
                        "checkIn": {
                          "monday": false,
                          "tuesday": true,
                          "wednesday": true,
                          "thursday": true,
                          "friday": true,
                          "saturday": true,
                          "sunday": true
                        },
                        "checkOut": {
                          "monday": false,
                          "tuesday": true,
                          "wednesday": true,
                          "thursday": true,
                          "friday": true,
                          "saturday": true,
                          "sunday": true
                        }
                      },
                      {
                        "beginDate": "2020-03-16",
                        "endDate": "2020-03-23",
                        "checkIn": {
                          "monday": true,
                          "tuesday": false,
                          "wednesday": false,
                          "thursday": false,
                          "friday": false,
                          "saturday": true,
                          "sunday": true
                        },
                        "checkOut": {
                          "monday": true,
                          "tuesday": false,
                          "wednesday": false,
                          "thursday": false,
                          "friday": false,
                          "saturday": true,
                          "sunday": true
                        }
                      }
                    ],
                    "availabilities": [
                      {
                        "beginDate": "2020-04-20",
                        "endDate": "2020-04-25",
                        "availability": false
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/ra": {
      "post": {
        "description": "Create and update calls are the same. When data is sent, if the data already exists in BookingPal - that data will be updated. Otherwise it will be created (inserted). If you want to update data for some period, you should just send data for these dates. All other data (for other dates) will remain untouched. This allows you to update only changed periods and we will not delete previously sent data for other periods.\n\nIn the case of a first data push, all data for one property should be sent in one request.  When making updates or changes to existing data, then all changed data should be sent in one request.\n\nNote: if property is set to use LOS rates (supportedLosRates) - only field leadTime, array availableCount and availability can be updated in this API call (for MLT property). For SGL property only leadTime and availability can be updated. This API call can not be used for OWN properties.\nImportant: Maximum allowed end date in any data type is 3 years in future.\n\nEvery API call in this section should be with PM credentials.",
        "summary": "Create and update rates and availability",
        "tags": [
          "Rates and Availability"
        ],
        "operationId": "Createandupdateratesandavailability",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateandupdateratesandavailabilityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RatesAvailabilityresponse"
            },
            "examples": {
              "application/json": {
                "message": "This product is SGL and can't have availableCount!",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "leadTime": 2,
                    "rates": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "amount": 137
                      }
                    ],
                    "minStays": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "minStay": 5
                      }
                    ],
                    "maxStays": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "maxStay": 20
                      }
                    ],
                    "restrictions": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-01-25",
                        "checkIn": {
                          "monday": false,
                          "tuesday": false,
                          "wednesday": false,
                          "thursday": false,
                          "friday": false,
                          "saturday": true,
                          "sunday": true
                        },
                        "checkOut": {
                          "monday": false,
                          "tuesday": false,
                          "wednesday": false,
                          "thursday": false,
                          "friday": false,
                          "saturday": true,
                          "sunday": true
                        }
                      }
                    ],
                    "availabilities": [
                      {
                        "beginDate": "2020-04-20",
                        "endDate": "2020-04-25",
                        "availability": false
                      },
                      {
                        "beginDate": "2020-04-26",
                        "endDate": "2020-04-28",
                        "availability": true
                      }
                    ],
                    "availableCount": [
                      {
                        "beginDate": "2020-04-20",
                        "endDate": "2020-04-25",
                        "count": 3
                      },
                      {
                        "beginDate": "2020-04-26",
                        "endDate": "2020-04-28",
                        "count": 4
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/losrates": {
      "post": {
        "description": "Introduction: You can use this function if you would like to send BookingPal different prices for various Length of Stays with the same starting date.\r\n\r\nLOS Pricing will be a different method in sending rates to BookingPal and is defined as pricing sent for a specific âStay rangesâ, In the LOS  method you are setting specific rates based on the Length of Stay. (This is a different way to push rates to BookingPal. )\r\n\r\nFor date periods of 1 to 30 days a specific rate need to enter check-in date and a rate for every possible reservation starting at that date (i.e. 1 day, 2 days, up to 30 days, 30 days is the maximum value allowed for this field) you will need to send BookingPal total rate value for that period. \r\n\r\nMaximum LOS number of days is 30. All other LOS values after 30 will not be saved. If you do not support reservation for some specific number of dates - send value 0.00 for this LOS number of days. Keep in mind that all values not sent for any specific check-in date will be considered as 0, and reservation for this number of days will not be possible.\r\nField maxGuests allows you to set different rates per different number of guests. If you do not have different rate values per number of guests - you can send the value for maximum number of guests, and all others will have the same rate.\r\n\r\nFor MLT properties which supported LOS price for update number of count you can use it rates and availability API.\r\n\r\nIt is suggested to manage availability over ârates and availabilityâ API call, and to close/open dates over this call.\r\n\r\nNote: this API call can be used only if you set supportedLosRates = true on the product. Otherwise using this API for specific product is not possible.\r\n",
        "summary": "Create and update LOS (Length of Stay) pricing",
        "tags": [
          "LOS Pricing"
        ],
        "operationId": "CreateandupdateLOS(LengthofStay)pricing",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateandupdateLOSRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LOSratesresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "losRates": [
                      {
                        "checkInDate": "2020-05-21",
                        "currency": "RSD",
                        "maxGuests": 4,
                        "losValue": [
                          111,
                          112,
                          123,
                          250,
                          300,
                          350,
                          400,
                          450,
                          500,
                          550,
                          600,
                          650,
                          700,
                          750,
                          800,
                          850,
                          900,
                          950,
                          550,
                          510,
                          570,
                          520,
                          500,
                          510,
                          590,
                          580,
                          560,
                          540,
                          0,
                          0
                        ]
                      },
                      {
                        "checkInDate": "2020-06-20",
                        "currency": "RSD",
                        "maxGuests": 3,
                        "losValue": [
                          100,
                          150,
                          200,
                          250,
                          300,
                          0,
                          0,
                          450,
                          500,
                          550,
                          600,
                          650,
                          700,
                          750,
                          800,
                          850,
                          900,
                          950,
                          550,
                          510,
                          570,
                          520,
                          500,
                          510,
                          590,
                          121,
                          122,
                          123,
                          0,
                          0
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/losrates/{productId}": {
      "get": {
        "description": "This function allows the logged in user to get a LOS rate for property.",
        "summary": "Get los prices list by product Id",
        "tags": [
          "LOS Pricing"
        ],
        "operationId": "GetlospriceslistbyproductId",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Property ID in BookingPal"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LOSratesresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "losRates": [
                      {
                        "checkInDate": "2020-05-21",
                        "currency": "RSD",
                        "maxGuests": 4,
                        "losValue": [
                          111,
                          112,
                          123,
                          250,
                          300,
                          350,
                          400,
                          450,
                          500,
                          550,
                          600,
                          650,
                          700,
                          750,
                          800,
                          850,
                          900,
                          950,
                          550,
                          510,
                          570,
                          520,
                          500,
                          510,
                          590,
                          580,
                          560,
                          540,
                          0,
                          0
                        ]
                      },
                      {
                        "checkInDate": "2020-06-20",
                        "currency": "RSD",
                        "maxGuests": 3,
                        "losValue": [
                          100,
                          150,
                          200,
                          250,
                          300,
                          0,
                          0,
                          450,
                          500,
                          550,
                          600,
                          650,
                          700,
                          750,
                          800,
                          850,
                          900,
                          950,
                          550,
                          510,
                          570,
                          520,
                          500,
                          510,
                          590,
                          121,
                          122,
                          123,
                          0,
                          0
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/taxfee/{productId}": {
      "get": {
        "description": "This function allows the logged in user to get a fee list for the specific product.",
        "summary": "Get fee and tax list by product Id",
        "tags": [
          "Fee and Tax"
        ],
        "operationId": "GetfeeandtaxlistbyproductId",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the property"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FeeTaxResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "fees": [
                      {
                        "beginDate": "2020-02-26",
                        "endDate": "2020-12-12",
                        "entityType": "OPTIONAL",
                        "feeType": "GENERAL",
                        "option": 3,
                        "name": "RetestFeeHF",
                        "taxType": "TAXABLE",
                        "unit": "PER_DAY_PER_PERSON_EXTRA",
                        "value": 88,
                        "valueType": "PERCENT"
                      }
                    ],
                    "taxes": [
                      {
                        "name": "Tax reTestAT",
                        "type": "SalesTaxIncluded",
                        "value": 55,
                        "altId": "11"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/taxfee": {
      "post": {
        "description": "This function allows the logged in user to set fees (i.e. cleaning fee, damage waiver, extra bed, extra person etc.) and taxes for the specific product. Here, you always need to send all fees and taxes for one property. All fees or taxes which were in our system for that property and which are not in the new request will be deleted. Taxes in the BookingPal system will always have percent value. \n\nIf you want to delete all fees and/or taxes for one property (if you do not have fees and taxes in your system for one property) send an empty list of fees and.or taxes. In short when you use this request you need to always send us a full list of fees and taxes per property, since we will do a full update.",
        "summary": "Create fee and tax",
        "tags": [
          "Fee and Tax"
        ],
        "operationId": "Createfeeandtax",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreatefeeandtaxRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FeeTaxResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "fees": [
                      {
                        "beginDate": "2020-02-26",
                        "endDate": "2020-12-12",
                        "entityType": "OPTIONAL",
                        "feeType": "GENERAL",
                        "option": 3,
                        "name": "RetestFeeHF",
                        "taxType": "TAXABLE",
                        "unit": "PER_DAY_PER_PERSON_EXTRA",
                        "value": 88,
                        "valueType": "PERCENT"
                      }
                    ],
                    "taxes": [
                      {
                        "name": "Tax reTestAT",
                        "type": "SalesTaxIncluded",
                        "value": 55,
                        "altId": "11"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/validation-settings/get-validation": {
      "get": {
        "description": "This function allows the logged in user to get info about current set for all PM properties are fees/taxes set to be mandatory or not.\r\n",
        "summary": "Get fee and tax mandatory",
        "tags": [
          "Fee and Tax Mandatory at the property level"
        ],
        "operationId": "Getfeeandtaxmandatory",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FeeTaxValidationSettingResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "validationSettings": [
                      {
                        "productId": 1235124634,
                        "isFeeMandatory": false,
                        "isTaxMandatory": false
                      },
                      {
                        "productId": 1235124636,
                        "isFeeMandatory": true,
                        "isTaxMandatory": true
                      },
                      {
                        "productId": 1235124637,
                        "isFeeMandatory": true,
                        "isTaxMandatory": true
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/validation-settings/import-update": {
      "post": {
        "description": "This function allows the logged in user to import or update a fee and tax mandatory.",
        "summary": "Import or update fee and tax mandatory",
        "tags": [
          "Fee and Tax Mandatory at the property level"
        ],
        "operationId": "Importorupdatefeeandtaxmandatory",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetfeeandtaxvalidationsettingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "For product ids [1235124634] the validation settings are imported!",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/validation-settings/removed": {
      "post": {
        "description": "This function allows the logged in user to remove any setup on property level and to return on default (which is that fee/taxes are mandatory). This API call will accept a list of properties.\r\n",
        "summary": "Remove Validation Settings",
        "tags": [
          "Fee and Tax Mandatory at the property level"
        ],
        "operationId": "RemoveValidationSettings",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "For product ids [1235124634] the validation settings will be removed!",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/yield/{productId}": {
      "get": {
        "description": "This function allows the logged in user to get yield management rules list of the specific product.\r\n",
        "summary": "Get YMR list by product ID",
        "tags": [
          "Yields"
        ],
        "operationId": "GetYMRlistbyproductID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the property"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Yieldresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "weekend": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-02-15",
                        "amount": 18,
                        "modifier": "DECREASE_PERCENT",
                        "weekendParam": "DAYS_OF_WEEKEND_SAT_SUN"
                      }
                    ],
                    "lengthOfStay": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-02-15",
                        "amount": 34,
                        "modifier": "INCREASE_AMOUNT",
                        "param": 7
                      }
                    ],
                    "dateRange": [
                      {
                        "beginDate": "2020-04-10",
                        "endDate": "2020-04-15",
                        "amount": 35,
                        "modifier": "INCREASE_AMOUNT"
                      },
                      {
                        "beginDate": "2020-05-16",
                        "endDate": "2020-05-25",
                        "amount": 25,
                        "modifier": "INCREASE_PERCENT"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/yield": {
      "post": {
        "description": "This function allows the logged-in user to add yield management rules for the specific product. Yield management rules can affect the final price of the property depending on some special conditions (like the length of stay, early booking, etc.). These rules automate price manipulations, on an inquiry by inquiry basis. When set criteria are met, they help maximize revenue and occupancy.\n\nHow is the price calculated?\nThe price for a night is calculated based on the basic price and the yield management rules.\n\n- If no YMR:\n{basic price per night} = price per night\n- If YMR is set it can Increase/decrease percent or increase/decrease amount:\n\t{basic price per night} + {yield amount} = {price per night}\n\tor\n\t{basic price per night} - {yield amount} = {price per night}\n\nThe below examples will use the scenario to walk you step by step and explain how the price is calculated based on different YMRs. \nLetâs say that the basic price per night for 2016 is 100 USD.\n\nThis function is used also for updating yield. So if you already create a specific yield for some date - and you send a new one - we will update the yield for this date.\nIf you need to delete a specific yield type - you can send an empty list for that type.\n\nImportant: The maximum allowed end date is 3 years in the future.",
        "summary": "Create YMR",
        "tags": [
          "Yields"
        ],
        "operationId": "CreateYMR",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateYieldRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Yieldresponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "productId": 1235124634,
                    "weekend": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-02-15",
                        "amount": 18,
                        "modifier": "DECREASE_PERCENT",
                        "weekendParam": "DAYS_OF_WEEKEND_SAT_SUN"
                      }
                    ],
                    "lengthOfStay": [
                      {
                        "beginDate": "2020-03-17",
                        "endDate": "2021-02-15",
                        "amount": 34,
                        "modifier": "INCREASE_AMOUNT",
                        "param": 7
                      }
                    ],
                    "dateRange": [
                      {
                        "beginDate": "2020-04-10",
                        "endDate": "2020-04-15",
                        "amount": 35,
                        "modifier": "INCREASE_AMOUNT"
                      },
                      {
                        "beginDate": "2020-05-16",
                        "endDate": "2020-05-25",
                        "amount": 25,
                        "modifier": "INCREASE_PERCENT"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/validation": {
      "get": {
        "description": "This function will allow the PMC to call the BookingPal property validation job for all properties identified which belong to the current user. Authorization token should be on PM level. \nAlso we will run validation only for properties which are activated. If you deactivate property - we will not validate this property.\n\nAfter the request you will get a response indicating if messages were processed or not. If the request is good your request for the validator job will be put into a queue. Once the request is processed, BookingPal will send an async push message per property informing the user if a property is valid or not, and if it is not valid - with reasons why the validation failed. This message will be sent on the endpoint which was entered in section Push Notifications, field asyncPush.\n\nNote: If the property is distributed already on some channel - this property will not be moved to an Incomplete state. Also if you have property on Incomplete state because of some reason, and you update this data which causes that property is on âIncompleteâ property will not be moved automatically to a valid state. Instead, you should run a Validation job manually for that property or wait for our automatic validation job which we are running once per day. \n\nTo make the property ready for Onboarding you should run validation first. if the property is valid - it will be ready for onboarding. Otherwise - the property will be in Incomplete state. Also, we will run validation only for properties that are activated. If you deactivate property - we will not validate this property.",
        "summary": "BookingPal Validation job - Full PM",
        "tags": [
          "Validation"
        ],
        "operationId": "BookingPalValidationjob-FullPM",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Your request was received and put in queue",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "description": "This function will allow the PMS to call the BookingPal property validation job for a list of properties from request. These properties must belong to the current user and authorization token should be on PM level.\nAlso, we will run validation only for properties that are activated. If you deactivate property - we will not validate this property.",
        "summary": "BookingPal Validation job - List of properties",
        "tags": [
          "Validation"
        ],
        "operationId": "BookingPalValidationjob-Listofproperties",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValidationforListofpropertiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Your request was received and put in queue",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/messageTest/allthreads/{threadType}": {
      "get": {
        "description": "This function allows the logged in user to get all message threads or message threads with an unresponded message from guest for the whole PM. You need to use PM credentials. There is also paging as optional values. If you do not pass this value, we will return the first page and 10 threads per page.\n\nSince API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes weâve  built an additional endpoint with the same API calls where you will be able to test these calls.\n\nNote: To be able to test these calls, you need to have at least 1 property, since we will in response return you messages for 1 property from your PM.",
        "summary": "Get Test message threads",
        "tags": [
          "Testing of message API calls"
        ],
        "operationId": "GetTestmessagethreads",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "threadType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Request all threads or only threads with unanswered message {new,all}"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetmessagethreadsResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "threads": [
                      {
                        "id": 68241,
                        "lastMessageSentAt": "2019-12-03 00:00:00",
                        "lastMessageText": "Message KHSroelMoR",
                        "channelName": "AirBnB",
                        "channelABB": "ABB",
                        "guestName": "Test Guest Name 2 ",
                        "guestEmailAddress": "autoeelcbl@atxjarv.uri",
                        "productId": 1235124634,
                        "reservationId": 119557886,
                        "dateFrom": "2019-12-02",
                        "dateTo": "2019-12-04"
                      },
                      {
                        "id": 68257,
                        "lastMessageSentAt": "2019-12-03 00:00:00",
                        "lastMessageText": "Message ytgdVvQpQm",
                        "channelName": "AirBnB",
                        "channelABB": "ABB",
                        "guestName": "Test Guest Name 1",
                        "guestEmailAddress": "autoppresf@at81.sla",
                        "productId": 1235124634,
                        "dateFrom": "2019-12-02",
                        "dateTo": "2019-12-04"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/messageTest/specificthread/{threadId}": {
      "get": {
        "description": "Since API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes, weâve built an additional endpoint with the same API calls where you will be able to test these calls.\n\nThis function allows the logged-in user to get a list of all messages from passed thread Id. You need to use PM credentials\n\nNote: To be able to test these calls, you need to have at least 1 property, since we will in response return you messages for 1 property from your PM.",
        "summary": "Get Test message list for specific thread",
        "tags": [
          "Testing of message API calls"
        ],
        "operationId": "GetTestmessagelistforspecificthread",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of thread"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetmessagelistforspecificthreadResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "messages": [
                      {
                        "message": "Test message",
                        "createdAt": "2019-11-25 12:32:39",
                        "user": "PROPERTY_MANAGER"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/messageTest": {
      "post": {
        "description": "This function will allow PM to post new messages in already existing threads. Since this call is only for testing - we will not actually save these passed values.\n\nSince API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes, weâve built an additional endpoint with the same API calls where you will be able to test these calls.\n\nNote: To be able to test these calls, you need to have at least 1 property, since we will in response return to you messages for 1 property from your PM.",
        "summary": "Post new Test message for specific thread",
        "tags": [
          "Testing of message API calls"
        ],
        "operationId": "PostnewTestmessageforspecificthread",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PostnewmessageforspecificthreadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Your request was received and put in queue",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/message/allthreads/{threadType}": {
      "get": {
        "description": "This function allows the logged in user to get all message threads or message threads with unresponded message from guest for whole PM. You need to use PM credentials. There is also paging as optional values. If you do not pass this value, we will return first page and 10 threads per page. And in heading you will get a link for the next page.",
        "summary": "Get message threads",
        "tags": [
          "Messaging"
        ],
        "operationId": "Getmessagethreads",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Number of current page"
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Limit of how many threads will be showed at one page"
          },
          {
            "name": "threadType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Request all threads or only threads with  unanswered message {new,all}"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetmessagethreadsResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "threads": [
                      {
                        "id": 68241,
                        "lastMessageSentAt": "2019-12-03 00:00:00",
                        "lastMessageText": "Message KHSroelMoR",
                        "channelName": "AirBnB",
                        "channelABB": "ABB",
                        "guestName": "Test Guest Name 2 ",
                        "guestEmailAddress": "autoeelcbl@atxjarv.uri",
                        "productId": 1235124634,
                        "reservationId": 119557886,
                        "dateFrom": "2019-12-02",
                        "dateTo": "2019-12-04"
                      },
                      {
                        "id": 68257,
                        "lastMessageSentAt": "2019-12-03 00:00:00",
                        "lastMessageText": "Message ytgdVvQpQm",
                        "channelName": "AirBnB",
                        "channelABB": "ABB",
                        "guestName": "Test Guest Name 1",
                        "guestEmailAddress": "autoppresf@at81.sla",
                        "productId": 1235124634,
                        "dateFrom": "2019-12-02",
                        "dateTo": "2019-12-04"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/message/specificthread/{threadId}/": {
      "get": {
        "description": "This function allows the logged in user to get a list of all messages from passed thread Id. You need to use PM credentials.\r\n",
        "summary": "Get message list for specific thread",
        "tags": [
          "Messaging"
        ],
        "operationId": "Getmessagelistforspecificthread",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the thread"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetmessagelistforspecificthreadResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "messages": [
                      {
                        "message": "Test message",
                        "createdAt": "2019-11-25 12:32:39",
                        "user": "PROPERTY_MANAGER"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/message": {
      "post": {
        "description": "This function will allow PM to post new messages in already existing threads.",
        "summary": "Post new message for specific thread",
        "tags": [
          "Messaging"
        ],
        "operationId": "Postnewmessageforspecificthread",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PostnewmessageforspecificthreadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Your request was received and put in queue",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/requestToBook": {
      "post": {
        "description": "This is an API call which you should use for accepting on avoiding requests to book.",
        "summary": "Request to Book - Answer from PMS",
        "tags": [
          "Request To Book"
        ],
        "operationId": "RequesttoBook-AnswerfromPMS",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/RequesttoBook-AnswerfromPMSRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Request to book answer accepted",
                "errorMessage": [],
                "is_error": false,
                "code": ""
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/requestToBookTest": {
      "post": {
        "description": "Since you can not get the request to book on our test environment (since this first needs to be created on the channel) We provide the possibility for PMS to test this request with some random filled data in our system. So when you call this API function - we will send you push notification for the request to book for a provided property ID.",
        "summary": "Request to Book - Test",
        "tags": [
          "Request To Book"
        ],
        "operationId": "RequesttoBook-Test",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/RequesttoBook-TestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/APIResponsewithoutData"
            },
            "examples": {
              "application/json": {
                "message": "Request to book test accepted",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": []
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/": {
      "post": {
        "description": "This will be a request which we will send to PMS when we get a request to book from the channel.\nSo when BookingPal gets a new request to book request - we will push this POST request to the link which you set in BookingPal for your PMS (in Push Notification section - \"requestToBook\"). \n\nImportant note: In this doc to be able to test this - you need to set a full URL on the Configure button in the right section.",
        "summary": "Request to Book - request",
        "tags": [
          "Request To Book"
        ],
        "operationId": "RequesttoBook-request",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/RequestToBookRequestModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReservationpushResponse"
            },
            "examples": {
              "application/json": {
                "altId": "45717",
                "is_error": false,
                "code": "",
                "message": "Request to book is accepted."
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/info": {
      "post": {
        "description": "Provide the links on which the requests about new reservation and cancel reservation will be sent. Links should be https.\r\nThese links should be set on PMS level, so please use your PMS credentials. \r\n",
        "summary": "Push Notification Links",
        "tags": [
          "Push Notification"
        ],
        "operationId": "PushNotificationLinks",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PushNotificationLinksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PushNotificationLinksResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "bookLink": "https://newreservationnotification.link",
                    "cancelLink": "https://cancelreservation.link",
                    "asyncPush": "https://asyncpush.link",
                    "requestToBook": "https://requestToBook.link"
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      },
      "get": {
        "description": "This will return all notification URLs which are set. It will work on PMS level, so use PMS credentials.\r\n",
        "summary": "Get Notification Links",
        "tags": [
          "Push Notification"
        ],
        "operationId": "GetNotificationLinks",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PushNotificationLinksResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "bookLink": "https://newreservationnotification.link",
                    "cancelLink": "https://cancelreservation.link",
                    "asyncPush": "https://asyncpush.link",
                    "requestToBook": "https://requestToBook.link"
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/reservation/{productId}": {
      "get": {
        "description": "This function allows logged-in users to get all reservations for the specific product.",
        "summary": "Get Reservation by Product",
        "tags": [
          "Reservation Notifications"
        ],
        "operationId": "GetReservationbyProduct",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReservationGetResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "reservationId": "107",
                    "productId": "1235124634",
                    "supplierId": "61692799",
                    "agentName": "TestAndrew",
                    "confirmationId": "ZSC213123123A",
                    "customerName": "dasdasd",
                    "fromDate": "2019-05-17",
                    "toDate": "2019-05-23",
                    "adult": 2,
                    "child": 0,
                    "email": "apimaticTest@test.com",
                    "phone": "4234234",
                    "notes": "customer test message",
                    "total": 200.0,
                    "fees": [
                      {
                        "id": "937-4",
                        "name": "Cleaning Fee",
                        "value": 110.0
                      },
                      {
                        "id": "355",
                        "name": "Limited Damage Waiver",
                        "value": 60.0
                      },
                      {
                        "id": "1298",
                        "name": "Processing Fee",
                        "value": 40.0
                      }
                    ],
                    "taxes": [
                      {
                        "id": "22",
                        "name": "State of Florida-Lake County State Tax",
                        "value": 5.0
                      },
                      {
                        "id": "22",
                        "name": "State of Florida-Lake County State Tax",
                        "value": 5.0
                      },
                      {
                        "id": "23",
                        "name": "Tax-Lake County County Tax",
                        "value": 15.0
                      },
                      {
                        "id": "23",
                        "name": "Tax-Lake County County Tax",
                        "value": 10.0
                      }
                    ],
                    "newState": "Provisional",
                    "commission": {
                      "channelCommission": 10.0,
                      "bpCommission": 12.0
                    },
                    "rate": {
                      "originalRackRate": 10.0,
                      "netRate": 12.0,
                      "newPublishedRackRate": 11.0
                    },
                    "uniqueKey": "f207c4c029cb1ea1"
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/reservation": {
      "get": {
        "description": "This API call will return a list of reservations that belong to the current user.",
        "summary": "Get Reservation by PM",
        "tags": [
          "Reservation Notifications"
        ],
        "operationId": "GetReservationbyPM",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReservationGetResponse"
            },
            "examples": {
              "application/json": {
                "message": "",
                "errorMessage": [],
                "is_error": false,
                "code": "",
                "data": [
                  {
                    "reservationId": "107",
                    "productId": "1234816374",
                    "supplierId": "3731837",
                    "agentName": "TestAndrew",
                    "confirmationId": "ZSC213123123A",
                    "customerName": "dasdasd",
                    "fromDate": "2019-05-17",
                    "toDate": "2019-05-23",
                    "adult": 2,
                    "child": 0,
                    "email": "andrewtesttest222@gmail.com",
                    "phone": "4234234",
                    "notes": "customer test message",
                    "total": 200.0,
                    "fees": [
                      {
                        "id": "937-4",
                        "name": "Cleaning Fee",
                        "value": 110.0
                      },
                      {
                        "id": "355",
                        "name": "Limited Damage Waiver",
                        "value": 60.0
                      },
                      {
                        "id": "1298",
                        "name": "Processing Fee",
                        "value": 40.0
                      }
                    ],
                    "taxes": [
                      {
                        "id": "22",
                        "name": "State of Florida-Lake County State Tax",
                        "value": 5.0
                      },
                      {
                        "id": "22",
                        "name": "State of Florida-Lake County State Tax",
                        "value": 5.0
                      },
                      {
                        "id": "23",
                        "name": "Tax-Lake County County Tax",
                        "value": 15.0
                      },
                      {
                        "id": "23",
                        "name": "Tax-Lake County County Tax",
                        "value": 10.0
                      }
                    ],
                    "newState": "Provisional",
                    "commission": {
                      "channelCommission": 10.0,
                      "bpCommission": 12.0
                    },
                    "rate": {
                      "originalRackRate": 10.0,
                      "netRate": 12.0,
                      "newPublishedRackRate": 11.0
                    },
                    "uniqueKey": "f207c4c029cb1ea1"
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "Authorization": {
      "title": "Authorization",
      "description": "Authorization (Login) response",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "token": "a9eaf5b0-c433-450e-991d-8011fc4aa264",
        "partyId": 61692799,
        "organizationId": 61690131,
        "name": "Update Name",
        "currency": "USD",
        "supplierId": 61692799
      },
      "type": "object",
      "properties": {
        "token": {
          "description": "Generated token for authorization. It must be used in every request to API as param jwt. Token is valid for 1h",
          "type": "string"
        },
        "message": {
          "description": "Message",
          "type": "string"
        },
        "is_error": {
          "description": "Is request success or not",
          "type": "boolean"
        },
        "errorMessage": {
          "description": "Error Message(s) in Array format",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "code": {
          "description": "Response code",
          "type": "string"
        },
        "organizationId": {
          "description": "Organization id - PMS ID",
          "type": "integer",
          "format": "int32"
        },
        "supplierId": {
          "description": "Supplier ID (Property Manager ID - or PMS ID - depend on account on which you are logged in)",
          "type": "integer",
          "format": "int32"
        },
        "partyId": {
          "description": "Deprecated field. It will be removed in version 3.3. Please use supplierId field instead",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Account name",
          "type": "string"
        },
        "currency": {
          "description": "Account currency",
          "type": "string"
        }
      },
      "required": [
        "token",
        "message",
        "is_error",
        "errorMessage",
        "organizationId",
        "supplierId",
        "partyId",
        "name",
        "currency"
      ]
    },
    "GetPMslist": {
      "title": "GetPMslist",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "id": 61690133,
            "name": "Test name",
            "extraName": "Test fullname",
            "emailAddress": "test001@gmail.com"
          },
          {
            "id": 61690517,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa002@gmail.com"
          },
          {
            "id": 61690534,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa003@gmail.com"
          },
          {
            "id": 61691075,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa004@gmail.com"
          },
          {
            "id": 61691076,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa005@gmail.com"
          },
          {
            "id": 61691729,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa103@gmail.com"
          },
          {
            "id": 61691731,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "te@gmail.com"
          },
          {
            "id": 61691732,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "testa026@gmail.com"
          },
          {
            "id": 61691733,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa027@gmail.com"
          },
          {
            "id": 61691734,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa028@gmail.com"
          },
          {
            "id": 61691735,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa029@gmail.com"
          },
          {
            "id": 61691736,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "testa0031@gmail.com"
          },
          {
            "id": 61691737,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "testa0032@gmail.com"
          },
          {
            "id": 61691803,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "testa035@gmail.com"
          },
          {
            "id": 61691852,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa036@gmail.com"
          },
          {
            "id": 61691861,
            "name": "Auto-lyxpz company name",
            "extraName": "Auto-dzvjr full name",
            "emailAddress": "wnvuyqfya213@pqclbzs.rli"
          },
          {
            "id": 61691868,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "testa038@gmail.com"
          },
          {
            "id": 61691875,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM001@gmail.com"
          },
          {
            "id": 61691876,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM002@gmail.com"
          },
          {
            "id": 61691877,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM003@gmail.com"
          },
          {
            "id": 61691878,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM004@gmail.com"
          },
          {
            "id": 61691879,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM005@gmail.com"
          },
          {
            "id": 61691880,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM006@gmail.com"
          },
          {
            "id": 61691881,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM007@gmail.com"
          },
          {
            "id": 61691882,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM008@gmail.com"
          },
          {
            "id": 61691883,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM009@gmail.com"
          },
          {
            "id": 61691884,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM010@gmail.com"
          },
          {
            "id": 61691885,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM011@gmail.com"
          },
          {
            "id": 61691886,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM012@gmail.com"
          },
          {
            "id": 61691887,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM014@gmail.com"
          },
          {
            "id": 61691888,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM015@gmail.com"
          },
          {
            "id": 61691889,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM016@gmail.com"
          },
          {
            "id": 61691896,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM017@gmail.com"
          },
          {
            "id": 61691897,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM018@gmail.com"
          },
          {
            "id": 61691898,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM019@gmail.com"
          },
          {
            "id": 61691899,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM020@gmail.com"
          },
          {
            "id": 61691900,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM021@gmail.com"
          },
          {
            "id": 61691903,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa0141234@gmail.com"
          },
          {
            "id": 61691904,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa01412345@gmail.com"
          },
          {
            "id": 61691905,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM022@gmail.com"
          },
          {
            "id": 61691906,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM023@gmail.com"
          },
          {
            "id": 61691907,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa014123452@gmail.com"
          },
          {
            "id": 61691908,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa0141234521@gmail.com"
          },
          {
            "id": 61691909,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM024@gmail.com"
          },
          {
            "id": 61691910,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM025@gmail.com"
          },
          {
            "id": 61691911,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM026@gmail.com"
          },
          {
            "id": 61691979,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM028@gmail.com"
          },
          {
            "id": 61692003,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM030@gmail.com"
          },
          {
            "id": 61692065,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM031@gmail.com"
          },
          {
            "id": 61692066,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM032@gmail.com"
          },
          {
            "id": 61692067,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM033@gmail.com"
          },
          {
            "id": 61692068,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "TestPM034@gmail.com"
          },
          {
            "id": 61692418,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM01130@gmail.com"
          },
          {
            "id": 61692455,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM035@gmail.com"
          },
          {
            "id": 61692456,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM036@gmail.com"
          },
          {
            "id": 61692457,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM037@gmail.com"
          },
          {
            "id": 61692552,
            "name": "Update Name",
            "extraName": "Update Full Name",
            "emailAddress": "TestPM038@gmail.com"
          },
          {
            "id": 61692554,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM999MJ@gmail.com"
          },
          {
            "id": 61692695,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "testa133@gmail.com"
          },
          {
            "id": 61692769,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM050@gmail.com"
          },
          {
            "id": 61692782,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPMCreateProduct@gmail.com"
          },
          {
            "id": 61692785,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM055@gmail.com"
          },
          {
            "id": 61692787,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM056@gmail.com"
          },
          {
            "id": 61692789,
            "name": "Test",
            "extraName": "Test",
            "emailAddress": "TestPM057@gmail.com"
          },
          {
            "id": 61692790,
            "name": "Test Wiz",
            "extraName": "Test Wiz",
            "emailAddress": "TestPM058@gmail.com"
          },
          {
            "id": 61692791,
            "name": "Test wiz1",
            "extraName": "Test wiz1",
            "emailAddress": "TestPM059@gmail.com"
          },
          {
            "id": 61692793,
            "name": "Test wiz1",
            "extraName": "Test wiz1",
            "emailAddress": "TestPM060@gmail.com"
          },
          {
            "id": 61692794,
            "name": "Test wiz1",
            "extraName": "Test wiz1",
            "emailAddress": "TestPM061@gmail.com"
          },
          {
            "id": 61692795,
            "name": "Test wiz",
            "extraName": "Test wiz",
            "emailAddress": "TestPM062@gmail.com"
          },
          {
            "id": 61692797,
            "name": "Wizard Demo",
            "extraName": "Wizard Demo",
            "emailAddress": "wizarddemo@gmail.com"
          },
          {
            "id": 61692799,
            "name": "Test PM",
            "extraName": "Test PM",
            "emailAddress": "apimaticTest@test.com"
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "Text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of PMs models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PMs"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error"
      ]
    },
    "PMs": {
      "title": "PMs",
      "description": "Property Manager model",
      "example": {
        "id": 61690133,
        "name": "Test name",
        "extraName": "Test fullname",
        "emailAddress": "test001@gmail.com"
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the property manager",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the property managerâs company",
          "type": "string"
        },
        "extraName": {
          "description": "Contact person",
          "type": "string"
        },
        "emailAddress": {
          "description": "Email of the property manager",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "extraName",
        "emailAddress"
      ]
    },
    "Createnew/UpdatePropertyManagerRequest": {
      "title": "Createnew/UpdatePropertyManagerRequest",
      "example": {
        "data": {
          "companyDetails": {
            "accountId": "132",
            "companyName": "Test PM",
            "language": "en",
            "fullName": "Test PM",
            "companyAddress": {
              "country": "US",
              "state": "Test State",
              "streetAddress": "Test Street",
              "city": "Test City",
              "zip": "13245"
            },
            "website": "www.testsite.com",
            "email": "apimaticPMemail@test.com",
            "phone": {
              "countryCode": "+321",
              "number": "132456"
            },
            "password": "password",
            "currency": "USD"
          },
          "policies": {
            "paymentPolicy": {
              "type": "SPLIT",
              "splitPayment": {
                "depositType": "FLAT",
                "value": 4.0,
                "secondPaymentDays": 30
              }
            },
            "cancellationPolicy": {
              "type": "MANUAL",
              "manualPolicy": {
                "type": "FLAT",
                "manualPolicies": [
                  {
                    "chargeValue": 20,
                    "beforeDays": 34,
                    "cancellationFee": 1.0
                  },
                  {
                    "chargeValue": 12,
                    "beforeDays": 45,
                    "cancellationFee": 2.0
                  }
                ]
              }
            },
            "feeTaxMandatory": {
              "isFeeMandatory": true,
              "isTaxMandatory": true
            },
            "terms": "www.test.com",
            "checkInTime": "10:00:00",
            "checkOutTime": "16:00:00",
            "leadTime": 2
          },
          "payment": {
            "paymentType": "MAIL_CHECK",
            "creditCard": {
              "creditCardType": "POST",
              "paymentGateways": {
                "paymentGatewaysType": "AUTHORIZE_NET",
                "user": "test",
                "secret": "test",
                "additionalField1": "",
                "additionalField2": ""
              },
              "creditCardList": [
                "AMERICAN_EXPRESS",
                "DINERS_CLUB"
              ]
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Company"
        }
      },
      "required": [
        "data"
      ]
    },
    "Company": {
      "title": "Company",
      "description": "Company model",
      "example": {
        "companyDetails": {
          "accountId": "132",
          "companyName": "Test PM",
          "language": "en",
          "fullName": "Test PM",
          "companyAddress": {
            "country": "US",
            "state": "Test State",
            "streetAddress": "Test Street",
            "city": "Test City",
            "zip": "13245"
          },
          "website": "www.testsite.com",
          "email": "apimaticPMemail@test.com",
          "phone": {
            "countryCode": "+321",
            "number": "132456"
          },
          "password": "password",
          "currency": "USD"
        },
        "policies": {
          "paymentPolicy": {
            "type": "SPLIT",
            "splitPayment": {
              "depositType": "FLAT",
              "value": 4.0,
              "secondPaymentDays": 30
            }
          },
          "cancellationPolicy": {
            "type": "MANUAL",
            "manualPolicy": {
              "type": "FLAT",
              "manualPolicies": [
                {
                  "chargeValue": 20,
                  "beforeDays": 34,
                  "cancellationFee": 1.0
                },
                {
                  "chargeValue": 12,
                  "beforeDays": 45,
                  "cancellationFee": 2.0
                }
              ]
            }
          },
          "feeTaxMandatory": {
            "isFeeMandatory": true,
            "isTaxMandatory": true
          },
          "terms": "www.test.com",
          "checkInTime": "10:00:00",
          "checkOutTime": "16:00:00",
          "leadTime": 2
        },
        "payment": {
          "paymentType": "MAIL_CHECK",
          "creditCard": {
            "creditCardType": "POST",
            "paymentGateways": {
              "paymentGatewaysType": "AUTHORIZE_NET",
              "user": "test",
              "secret": "test",
              "additionalField1": "",
              "additionalField2": ""
            },
            "creditCardList": [
              "AMERICAN_EXPRESS",
              "DINERS_CLUB"
            ]
          }
        }
      },
      "type": "object",
      "properties": {
        "companyDetails": {
          "$ref": "#/definitions/CompanyDetails"
        },
        "policies": {
          "$ref": "#/definitions/Policies"
        },
        "payment": {
          "$ref": "#/definitions/Payment"
        },
        "id": {
          "description": "Supplier id. Not expected in any requests. Will be only in responses.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "companyDetails",
        "policies",
        "payment"
      ]
    },
    "CompanyDetails": {
      "title": "CompanyDetails",
      "example": {
        "accountId": "132",
        "companyName": "Test PM",
        "language": "en",
        "fullName": "Test PM",
        "companyAddress": {
          "country": "US",
          "state": "Test State",
          "streetAddress": "Test Street",
          "city": "Test City",
          "zip": "13245"
        },
        "website": "www.testsite.com",
        "email": "apimaticPMemail@test.com",
        "phone": {
          "countryCode": "+321",
          "number": "132456"
        },
        "password": "password",
        "currency": "USD"
      },
      "type": "object",
      "properties": {
        "accountId": {
          "description": "Unique ID of PM in PMS",
          "type": "string"
        },
        "companyName": {
          "description": "Name of PM",
          "type": "string"
        },
        "language": {
          "description": "Language 2 letter value  as ISO 639-1 code",
          "type": "string"
        },
        "fullName": {
          "description": "First and Last Name",
          "type": "string"
        },
        "companyAddress": {
          "$ref": "#/definitions/CompanyAddress"
        },
        "website": {
          "description": "Company (PM) website URL",
          "type": "string"
        },
        "email": {
          "description": "Email of PM. Email need to be unique in BP system, so you might receive error if we already have this email in our system",
          "type": "string"
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "password": {
          "description": "Password for accessing PM. If the password is not passed in the request random password will be generated and returned in response. Password will be in response only on create and if it is manually generated. Special characters are not allowed, instead use UTF-8 codes, for example instead of # use %23",
          "type": "string"
        },
        "currency": {
          "description": "PM default currency. ISO 4217 code is required",
          "type": "string"
        }
      },
      "required": [
        "accountId",
        "companyName",
        "language",
        "fullName",
        "companyAddress",
        "website",
        "email",
        "phone",
        "currency"
      ]
    },
    "CompanyAddress": {
      "title": "CompanyAddress",
      "example": {
        "country": "US",
        "state": "Test State",
        "streetAddress": "Test Street",
        "city": "Test City",
        "zip": "13245"
      },
      "type": "object",
      "properties": {
        "country": {
          "description": "Country of PM. Require 2 letter ISO code",
          "type": "string"
        },
        "state": {
          "description": "State (Region) of PM. Required for US properties.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Street address of PM.",
          "type": "string"
        },
        "city": {
          "description": "City of PM",
          "type": "string"
        },
        "zip": {
          "description": "Zip code (postal code) of PM.",
          "type": "string"
        }
      },
      "required": [
        "country",
        "state",
        "streetAddress",
        "city",
        "zip"
      ]
    },
    "Phone": {
      "title": "Phone",
      "example": {
        "countryCode": "+321",
        "number": "132456"
      },
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "Country code prefix in phone number. For example â+1â.",
          "type": "string"
        },
        "number": {
          "description": "Phone number",
          "type": "string"
        }
      },
      "required": [
        "countryCode",
        "number"
      ]
    },
    "Policies": {
      "title": "Policies",
      "example": {
        "paymentPolicy": {
          "type": "SPLIT",
          "splitPayment": {
            "depositType": "FLAT",
            "value": 4.0,
            "secondPaymentDays": 30
          }
        },
        "cancellationPolicy": {
          "type": "MANUAL",
          "manualPolicy": {
            "type": "FLAT",
            "manualPolicies": [
              {
                "chargeValue": 20,
                "beforeDays": 34,
                "cancellationFee": 1.0
              },
              {
                "chargeValue": 12,
                "beforeDays": 45,
                "cancellationFee": 2.0
              }
            ]
          }
        },
        "feeTaxMandatory": {
          "isFeeMandatory": true,
          "isTaxMandatory": true
        },
        "terms": "www.test.com",
        "checkInTime": "10:00:00",
        "checkOutTime": "16:00:00",
        "leadTime": 2
      },
      "type": "object",
      "properties": {
        "paymentPolicy": {
          "$ref": "#/definitions/PaymentPolicy"
        },
        "cancellationPolicy": {
          "$ref": "#/definitions/CancellationPolicy"
        },
        "feeTaxMandatory": {
          "$ref": "#/definitions/FeeTaxMandatory"
        },
        "terms": {
          "description": "Full URL to PM terms and conditions",
          "type": "string"
        },
        "checkInTime": {
          "description": "Time of Check in (HH:MM:SS)",
          "type": "string"
        },
        "checkOutTime": {
          "description": "Time of Check out (HH:MM:SS)",
          "type": "string"
        },
        "leadTime": {
          "description": "Minimum number of days before check-in for which reservation is allowed to be booked. Allowed values are 0-7.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "paymentPolicy",
        "cancellationPolicy",
        "feeTaxMandatory",
        "terms",
        "checkInTime",
        "checkOutTime",
        "leadTime"
      ]
    },
    "PaymentPolicy": {
      "title": "PaymentPolicy",
      "example": {
        "type": "SPLIT",
        "splitPayment": {
          "depositType": "FLAT",
          "value": 4.0,
          "secondPaymentDays": 30
        }
      },
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/PaymentPolicyTypeEnum"
        },
        "splitPayment": {
          "$ref": "#/definitions/SplitPayment"
        }
      },
      "required": [
        "type",
        "splitPayment"
      ]
    },
    "SplitPayment": {
      "title": "SplitPayment",
      "example": {
        "depositType": "FLAT",
        "value": 4.0,
        "secondPaymentDays": 30
      },
      "type": "object",
      "properties": {
        "depositType": {
          "$ref": "#/definitions/DepositTypeEnum"
        },
        "value": {
          "description": "First payment value",
          "type": "number",
          "format": "double"
        },
        "secondPaymentDays": {
          "description": "Number of days before check-in when second payment is required.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "depositType",
        "value",
        "secondPaymentDays"
      ]
    },
    "CancellationPolicy": {
      "title": "CancellationPolicy",
      "example": {
        "type": "MANUAL",
        "manualPolicy": {
          "type": "FLAT",
          "manualPolicies": [
            {
              "chargeValue": 20,
              "beforeDays": 34,
              "cancellationFee": 1.0
            },
            {
              "chargeValue": 12,
              "beforeDays": 45,
              "cancellationFee": 2.0
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/CancellationPolicyTypeEnum"
        },
        "manualPolicy": {
          "$ref": "#/definitions/ManualPolicy"
        }
      },
      "required": [
        "type",
        "manualPolicy"
      ]
    },
    "ManualPolicy": {
      "title": "ManualPolicy",
      "example": {
        "type": "FLAT",
        "manualPolicies": [
          {
            "chargeValue": 20,
            "beforeDays": 34,
            "cancellationFee": 1.0
          },
          {
            "chargeValue": 12,
            "beforeDays": 45,
            "cancellationFee": 2.0
          }
        ]
      },
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ManualPolicyTypeEnum"
        },
        "manualPolicies": {
          "description": "Model",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManualPolicies"
          }
        }
      },
      "required": [
        "type",
        "manualPolicies"
      ]
    },
    "ManualPolicies": {
      "title": "ManualPolicies",
      "example": {
        "chargeValue": 20,
        "beforeDays": 34,
        "cancellationFee": 1.0
      },
      "type": "object",
      "properties": {
        "chargeValue": {
          "description": "Percentage or flat value which will be charged in case of cancellation",
          "type": "integer",
          "format": "int32"
        },
        "beforeDays": {
          "description": "Days before check-in when cancellation policy will be charged",
          "type": "integer",
          "format": "int32"
        },
        "cancellationFee": {
          "description": "Cancellation transaction fee - additional fee on cancellation",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "chargeValue",
        "beforeDays",
        "cancellationFee"
      ]
    },
    "FeeTaxMandatory": {
      "title": "FeeTaxMandatory",
      "example": {
        "isFeeMandatory": true,
        "isTaxMandatory": true
      },
      "type": "object",
      "properties": {
        "isFeeMandatory": {
          "description": "Used in BookingPal validator. Info does property require any fee or not. Default value is TRUE. This setup can be overridden on property level with different API call, which is stronger.",
          "type": "boolean"
        },
        "isTaxMandatory": {
          "description": "Used in BookingPal validator. Info does property require any tax or not. Default value is TRUE. This setup can be overridden on property level with different API call, which is stronger.",
          "type": "boolean"
        }
      },
      "required": [
        "isFeeMandatory",
        "isTaxMandatory"
      ]
    },
    "Payment": {
      "title": "Payment",
      "example": {
        "paymentType": "MAIL_CHECK",
        "creditCard": {
          "creditCardType": "POST",
          "paymentGateways": {
            "paymentGatewaysType": "AUTHORIZE_NET",
            "user": "test",
            "secret": "test",
            "additionalField1": "",
            "additionalField2": ""
          },
          "creditCardList": [
            "AMERICAN_EXPRESS",
            "DINERS_CLUB"
          ]
        }
      },
      "type": "object",
      "properties": {
        "paymentType": {
          "$ref": "#/definitions/PaymentTypeEnum"
        },
        "creditCard": {
          "$ref": "#/definitions/CreditCard"
        }
      },
      "required": [
        "paymentType"
      ]
    },
    "CreditCard": {
      "title": "CreditCard",
      "example": {
        "creditCardType": "POST",
        "paymentGateways": {
          "paymentGatewaysType": "AUTHORIZE_NET",
          "user": "test",
          "secret": "test",
          "additionalField1": "",
          "additionalField2": ""
        },
        "creditCardList": [
          "AMERICAN_EXPRESS",
          "DINERS_CLUB"
        ]
      },
      "type": "object",
      "properties": {
        "creditCardType": {
          "$ref": "#/definitions/CreditCardTypeEnum"
        },
        "paymentGateways": {
          "$ref": "#/definitions/PaymentGateways"
        },
        "creditCardList": {
          "description": "List of acceptable credit cards. Allowed only if type is TRANSMIT. {MASTER_CARD,VISA,AMERICAN_EXPRESS,DINERS_CLUB,DISCOVER}. If POST method selected it will select all creditCardList.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditCardListEnum"
          }
        }
      },
      "required": [
        "creditCardType"
      ]
    },
    "PaymentGateways": {
      "title": "PaymentGateways",
      "example": {
        "paymentGatewaysType": "AUTHORIZE_NET",
        "user": "test",
        "secret": "test",
        "additionalField1": "",
        "additionalField2": ""
      },
      "type": "object",
      "properties": {
        "paymentGatewaysType": {
          "$ref": "#/definitions/PaymentGatewaysTypeEnum"
        },
        "user": {
          "description": "Value necessary for accessing payment gateway, values are different per payment gateway: PAYPAL - Client ID AUTHORIZE_NET - User ID BRIDGE_PAY - Username PAY_BOX - Site number DIBS - Login O_GONE - User ID DOC_DATA - ID PAY_GATE - ID  Note: This value will not be returned in response.",
          "type": "string"
        },
        "secret": {
          "description": "Value necessary for accessing payment gateway, values are different per payment gateway: PAYPAL - Secret AUTHORIZE_NET - Transaction Key BRIDGE_PAY - Password  PAY_BOX - Rank number DIBS - Password O_GONE - Password  DOC_DATA - Password PAY_GATE - Password  Note: This value will not be returned in response.",
          "type": "string"
        },
        "additionalField1": {
          "description": "Additional value necessary for accessing some payment gateways, values are different per payment gateway: BRIDGE_PAY - Merchant Number PAY_BOX - An identifier DIBS - Merchant ID O_GONE - PSP ID  Note: This value will not be returned in response.",
          "type": "string"
        },
        "additionalField2": {
          "description": "Additional value necessary for accessing some payment gateways, values are different per payment gateway: BRIDGE_PAY - Merchant Number PAY_BOX - An identifier DIBS - Merchant ID O_GONE - PSP ID  Note: This value will not be returned in response.",
          "type": "string"
        }
      },
      "required": [
        "paymentGatewaysType"
      ]
    },
    "PropertyManagerdetailsresponse": {
      "title": "PropertyManagerdetailsresponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "companyDetails": {
              "accountId": "132",
              "companyName": "Test PM",
              "language": "en",
              "fullName": "Test PM",
              "companyAddress": {
                "country": "US",
                "state": "Test State",
                "streetAddress": "Test Street",
                "city": "Test City",
                "zip": "13245"
              },
              "website": "www.testsite.com",
              "email": "apimaticTest@test.com",
              "phone": {
                "countryCode": "+321",
                "number": "132456"
              },
              "currency": "USD"
            },
            "policies": {
              "paymentPolicy": {
                "type": "SPLIT",
                "splitPayment": {
                  "depositType": "FLAT",
                  "value": 4,
                  "secondPaymentDays": 30
                }
              },
              "cancellationPolicy": {
                "type": "MANUAL",
                "manualPolicy": {
                  "type": "FLAT",
                  "manualPolicies": [
                    {
                      "chargeValue": 20,
                      "beforeDays": 34,
                      "cancellationFee": 1
                    },
                    {
                      "chargeValue": 12,
                      "beforeDays": 45,
                      "cancellationFee": 2
                    }
                  ]
                }
              },
              "feeTaxMandatory": {
                "isFeeMandatory": true,
                "isTaxMandatory": true
              },
              "terms": "www.test.com",
              "checkInTime": "10:00:00",
              "checkOutTime": "16:00:00",
              "leadTime": 2
            },
            "payment": {
              "paymentType": "MAIL_CHECK",
              "creditCard": {
                "creditCardType": "POST",
                "creditCardList": [
                  "AMERICAN_EXPRESS",
                  "DINERS_CLUB",
                  "DISCOVER",
                  "MASTER_CARD",
                  "VISA"
                ],
                "paymentGateways": {
                  "paymentGatewaysType": "AUTHORIZE_NET"
                }
              }
            },
            "id": 61692799
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "Productresponse": {
      "title": "Productresponse",
      "description": "Response for Get, Create or Update product API call",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "name": "Apimatic Test",
            "id": 1235124634,
            "supplierId": 61692799,
            "rooms": 5,
            "bathrooms": 4,
            "toilets": 2,
            "totalBeds": 6,
            "space": 111,
            "spaceUnit": "SQ_FT",
            "persons": 10,
            "childs": 2,
            "latitude": 41.886125,
            "longitude": -87.634233,
            "livingRoom": 2,
            "altId": 23556,
            "notes": {
              "description": {
                "texts": [
                  {
                    "language": "EN",
                    "value": "Main description on EN!"
                  },
                  {
                    "language": "ES",
                    "value": "Main description on ES!"
                  }
                ]
              },
              "houseRules": {
                "texts": [
                  {
                    "language": "EN",
                    "value": "House Rules on EN!"
                  },
                  {
                    "language": "SR",
                    "value": "House Rules on SR!"
                  }
                ]
              },
              "name": {
                "texts": [
                  {
                    "language": "EN",
                    "value": "Name on EN!"
                  },
                  {
                    "language": "SR",
                    "value": "Name on SR!"
                  }
                ]
              },
              "shortDescription": {
                "texts": [
                  {
                    "language": "EN",
                    "value": "short desc on EN!"
                  },
                  {
                    "language": "SR",
                    "value": "short desc on SR!"
                  }
                ]
              },
              "finePrint": {
                "texts": [
                  {
                    "language": "EN",
                    "value": "fine prints on EN!"
                  },
                  {
                    "language": "SR",
                    "value": "fine prints on SR!"
                  }
                ]
              }
            },
            "attributesWithQuantity": [
              {
                "attributeId": "HAC312",
                "quantity": 1
              },
              {
                "attributeId": "RMA107",
                "quantity": 1
              },
              {
                "attributeId": "RMA11",
                "quantity": 1
              },
              {
                "attributeId": "RMA149",
                "quantity": 1
              },
              {
                "attributeId": "RMA163",
                "quantity": 1
              },
              {
                "attributeId": "RMA18",
                "quantity": 1
              },
              {
                "attributeId": "RMA19",
                "quantity": 1
              },
              {
                "attributeId": "RMA251",
                "quantity": 1
              },
              {
                "attributeId": "RMA273",
                "quantity": 1
              },
              {
                "attributeId": "RMA32",
                "quantity": 1
              },
              {
                "attributeId": "RMA41",
                "quantity": 1
              },
              {
                "attributeId": "RMA5085",
                "quantity": 1
              },
              {
                "attributeId": "RMA59",
                "quantity": 1
              },
              {
                "attributeId": "RMA6058",
                "quantity": 1
              },
              {
                "attributeId": "RMA68",
                "quantity": 1
              },
              {
                "attributeId": "RMA88",
                "quantity": 1
              }
            ],
            "nearbyAmenities": [],
            "propertyType": "PCT34",
            "bedroomConfiguration": {
              "bedrooms": [
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA113",
                        "count": 1
                      },
                      {
                        "bedType": "RMA58",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Bedroom",
                  "privateBathroom": false
                },
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA113",
                        "count": 1
                      },
                      {
                        "bedType": "RMA58",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Bedroom",
                  "privateBathroom": false
                },
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA113",
                        "count": 1
                      },
                      {
                        "bedType": "RMA86",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Bedroom",
                  "privateBathroom": false
                },
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA113",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Bedroom",
                  "privateBathroom": false
                },
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA113",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Bedroom",
                  "privateBathroom": false
                },
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA58",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Bedroom",
                  "privateBathroom": true
                },
                {
                  "beds": {
                    "bed": [
                      {
                        "bedType": "RMA58",
                        "count": 1
                      }
                    ]
                  },
                  "type": "Living Room",
                  "privateBathroom": false
                }
              ]
            },
            "checkInTime": "16:00:00",
            "checkInToTime": "20:00:00",
            "checkOutTime": "10:00:00",
            "currency": "EUR",
            "policy": {
              "internetPolicy": {
                "accessInternet": true,
                "kindOfInternet": "WiFi",
                "availableInternet": "AllAreas",
                "chargeInternet": "Free"
              },
              "parkingPolicy": {
                "accessParking": true,
                "locatedParking": "OnSite",
                "privateParking": true,
                "chargeParking": "$ 150",
                "timeCostParking": "PerStay",
                "necessaryReservationParking": "NotPossible"
              },
              "petPolicy": {
                "allowedPets": "Allowed",
                "chargePets": "Free"
              },
              "childrenAllowed": true,
              "smokingAllowed": false
            },
            "location": {
              "postalCode": "60606",
              "country": "US",
              "region": "Illinois",
              "city": "Chicago",
              "street": "210 North Wells Street",
              "zipCode9": "60606-1330"
            },
            "supportedLosRates": false
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "Property": {
      "title": "Property",
      "example": {
        "name": "Apimatic Test",
        "id": 1235124634,
        "supplierId": 61692799,
        "rooms": 5,
        "bathrooms": 4,
        "toilets": 2,
        "totalBeds": 6,
        "space": 111,
        "spaceUnit": "SQ_FT",
        "persons": 10,
        "childs": 2,
        "latitude": 41.886125,
        "longitude": -87.634233,
        "livingRoom": 2,
        "notes": {
          "description": {
            "texts": [
              {
                "language": "EN",
                "value": "Main description on EN!"
              },
              {
                "language": "ES",
                "value": "Main description on ES!"
              }
            ]
          },
          "houseRules": {
            "texts": [
              {
                "language": "EN",
                "value": "House Rules on EN!"
              },
              {
                "language": "SR",
                "value": "House Rules on SR!"
              }
            ]
          }
        },
        "attributesWithQuantity": [
          {
            "attributeId": "HAC312",
            "quantity": 1
          },
          {
            "attributeId": "RMA107",
            "quantity": 1
          },
          {
            "attributeId": "RMA11",
            "quantity": 1
          },
          {
            "attributeId": "RMA149",
            "quantity": 1
          },
          {
            "attributeId": "RMA163",
            "quantity": 1
          },
          {
            "attributeId": "RMA18",
            "quantity": 1
          },
          {
            "attributeId": "RMA19",
            "quantity": 1
          },
          {
            "attributeId": "RMA251",
            "quantity": 1
          },
          {
            "attributeId": "RMA273",
            "quantity": 1
          },
          {
            "attributeId": "RMA32",
            "quantity": 1
          },
          {
            "attributeId": "RMA41",
            "quantity": 1
          },
          {
            "attributeId": "RMA5085",
            "quantity": 1
          },
          {
            "attributeId": "RMA59",
            "quantity": 1
          },
          {
            "attributeId": "RMA6058",
            "quantity": 1
          },
          {
            "attributeId": "RMA68",
            "quantity": 1
          },
          {
            "attributeId": "RMA88",
            "quantity": 1
          }
        ],
        "nearbyAmenities": [],
        "propertyType": "PCT34",
        "bedroomConfiguration": {
          "bedrooms": [
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA113",
                    "count": 1
                  },
                  {
                    "bedType": "RMA58",
                    "count": 1
                  }
                ]
              },
              "type": "Bedroom",
              "privateBathroom": false
            },
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA113",
                    "count": 1
                  },
                  {
                    "bedType": "RMA58",
                    "count": 1
                  }
                ]
              },
              "type": "Bedroom",
              "privateBathroom": false
            },
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA113",
                    "count": 1
                  },
                  {
                    "bedType": "RMA86",
                    "count": 1
                  }
                ]
              },
              "type": "Bedroom",
              "privateBathroom": false
            },
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA113",
                    "count": 1
                  }
                ]
              },
              "type": "Bedroom",
              "privateBathroom": false
            },
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA113",
                    "count": 1
                  }
                ]
              },
              "type": "Bedroom",
              "privateBathroom": false
            },
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA58",
                    "count": 1
                  }
                ]
              },
              "type": "Bedroom",
              "privateBathroom": true
            },
            {
              "beds": {
                "bed": [
                  {
                    "bedType": "RMA58",
                    "count": 1
                  }
                ]
              },
              "type": "Living Room",
              "privateBathroom": false
            }
          ]
        },
        "checkInTime": "16:00:00",
        "checkInToTime": "20:00:00",
        "checkOutTime": "10:00:00",
        "currency": "EUR",
        "policy": {
          "internetPolicy": {
            "accessInternet": true,
            "kindOfInternet": "WiFi",
            "availableInternet": "AllAreas",
            "chargeInternet": "Free"
          },
          "parkingPolicy": {
            "accessParking": true,
            "locatedParking": "OnSite",
            "privateParking": true,
            "chargeParking": "$ 150",
            "timeCostParking": "PerStay",
            "necessaryReservationParking": "NotPossible"
          },
          "petPolicy": {
            "allowedPets": "Allowed",
            "chargePets": "Free"
          },
          "childrenAllowed": true,
          "smokingAllowed": false
        },
        "location": {
          "postalCode": "60606",
          "country": "US",
          "region": "Illinois",
          "city": "Chicago",
          "street": "210 North Wells Street",
          "zipCode9": "60606-1330"
        },
        "supportedLosRates": false
      },
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the property to display in the list",
          "type": "string"
        },
        "id": {
          "description": "Property ID in BookingPal",
          "type": "integer",
          "format": "int32"
        },
        "altId": {
          "description": "Alternative Id of the property (ID in your PMS system).   Note: this field you can not update, so this field will not be used during update.",
          "type": "integer",
          "format": "int32"
        },
        "supplierId": {
          "description": "Id of the Property Manager (not be used for creating new property. Property will have ID of current authorized user)",
          "type": "integer",
          "format": "int32"
        },
        "rooms": {
          "description": "Number of bedrooms. Number of bedrooms should be > 0. Value 0 is only allowed in case property type  is Studio (PCT46 or PCT110)",
          "type": "integer",
          "format": "int32"
        },
        "bathrooms": {
          "description": "Number of bathrooms",
          "type": "integer",
          "format": "int32"
        },
        "toilets": {
          "description": "Number of toilets",
          "type": "integer",
          "format": "int32"
        },
        "totalBeds": {
          "description": "Propertyâs total number of beds",
          "type": "integer",
          "format": "int32"
        },
        "space": {
          "description": "Property size",
          "type": "number",
          "format": "double"
        },
        "spaceUnit": {
          "$ref": "#/definitions/SpaceUnitEnum"
        },
        "persons": {
          "description": "Maximum number of allowed adults",
          "type": "integer",
          "format": "int32"
        },
        "childs": {
          "description": "Number of allowed children (from 7 to 12 years)",
          "type": "integer",
          "format": "int32"
        },
        "latitude": {
          "description": "Latitude of the property (Must set field latitude and longitude or location)",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "Longitude of the property (Must set field latitude and longitude or location)",
          "type": "number",
          "format": "double"
        },
        "livingRoom": {
          "description": "Number of Living rooms",
          "type": "integer",
          "format": "int32"
        },
        "notes": {
          "$ref": "#/definitions/Notes"
        },
        "attributesWithQuantity": {
          "description": "Use this param instead of previous if you need to set quantity more than 1 of attributes. If use both in POST request this will overwrite the previous list (under param attributes).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributesWithQuantity"
          }
        },
        "nearbyAmenities": {
          "description": "List of Nearby Attributes models. Check allowed values in Appendix.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NearbyAmenity"
          }
        },
        "propertyType": {
          "$ref": "#/definitions/PropertyTypesEnum"
        },
        "bedroomConfiguration": {
          "$ref": "#/definitions/BedroomConfiguration"
        },
        "checkInTime": {
          "description": "Time of Check in (HH:MM:SS)",
          "type": "string"
        },
        "checkInToTime": {
          "description": "Time Check in to (HH:MM:SS)",
          "type": "string"
        },
        "checkOutTime": {
          "description": "Time of Check out (HH:MM:SS)",
          "type": "string"
        },
        "currency": {
          "description": "Property currency. ISO 4217 code is required.",
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/Policy"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "supportedLosRates": {
          "description": "If true - means that the property supports only LOS rates. So daily rates can not be sent and updated. Default is false.",
          "type": "boolean"
        },
        "taxNumber": {
          "description": "Tax number for product",
          "type": "string"
        },
        "touristLicenseNumber": {
          "description": "Tourist license number",
          "type": "string"
        },
        "touristLicenseExpiryDate": {
          "description": "Tourist license expiry date. Correct date format is YYYY-MM-DD.",
          "example": "YYYY-MM-DD",
          "type": "string",
          "format": "date"
        },
        "multiUnit": {
          "$ref": "#/definitions/MultiUnitEnum"
        },
        "parentId": {
          "description": "This fields should not be used unless your property is not MLT (check field multiunit). In this case you must set owner (parent) id property to which this property will belong. Also you can not update this property.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "name",
        "rooms",
        "bathrooms",
        "persons",
        "propertyType",
        "currency",
        "supportedLosRates"
      ]
    },
    "Notes": {
      "title": "Notes",
      "description": "Model where you can define different kinds of text values. If you need to delete some kind of texts, for example short description, you can do this on Update call (PUT), and you need to pass empty array for texts value, for example :  \"shortDescription\": {  \"texts\": [  ] }",
      "example": {
        "description": {
          "texts": [
            {
              "language": "EN",
              "value": "Main description on EN!"
            },
            {
              "language": "ES",
              "value": "Main description on ES!"
            }
          ]
        },
        "houseRules": {
          "texts": [
            {
              "language": "EN",
              "value": "House Rules on EN!"
            },
            {
              "language": "SR",
              "value": "House Rules on SR!"
            }
          ]
        },
        "name": {
          "texts": [
            {
              "language": "EN",
              "value": "House Rules on EN!"
            },
            {
              "language": "SR",
              "value": "House Rules on SR!"
            }
          ]
        },
        "shortDescription": {
          "texts": [
            {
              "language": "EN",
              "value": "House Rules on EN!"
            },
            {
              "language": "SR",
              "value": "House Rules on SR!"
            }
          ]
        },
        "finePrint": {
          "texts": [
            {
              "language": "EN",
              "value": "House Rules on EN!"
            },
            {
              "language": "SR",
              "value": "House Rules on SR!"
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/DescriptionTextModel"
        },
        "houseRules": {
          "$ref": "#/definitions/DescriptionTextModel"
        },
        "finePrint": {
          "$ref": "#/definitions/DescriptionTextModel"
        },
        "shortDescription": {
          "$ref": "#/definitions/DescriptionTextModel"
        },
        "name": {
          "$ref": "#/definitions/DescriptionTextModel"
        }
      },
      "required": [
        "description"
      ]
    },
    "DescriptionTextModel": {
      "title": "DescriptionTextModel",
      "description": "Model for any kind of description text in Property object",
      "example": {
        "texts": [
          {
            "language": "EN",
            "value": "Main description on EN!"
          },
          {
            "language": "ES",
            "value": "Main description on ES!"
          }
        ]
      },
      "type": "object",
      "properties": {
        "texts": {
          "description": "Text value per languages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Text"
          }
        }
      },
      "required": [
        "texts"
      ]
    },
    "Text": {
      "title": "Text",
      "example": {
        "language": "EN",
        "value": "Main description on EN!"
      },
      "type": "object",
      "properties": {
        "language": {
          "description": "Language 2 letter value  as ISO 639-1 code (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
          "type": "string"
        },
        "value": {
          "description": "Text value. Send here only plain text. Do not use HTML or any other characters.",
          "type": "string"
        }
      },
      "required": [
        "language",
        "value"
      ]
    },
    "AttributesWithQuantity": {
      "title": "AttributesWithQuantity",
      "example": {
        "attributeId": "HAC312",
        "quantity": 1
      },
      "type": "object",
      "properties": {
        "attributeId": {
          "description": "Text of main description Attributes  given code in Appendix",
          "type": "string"
        },
        "quantity": {
          "description": "Will be set to 1 by default",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "attributeId",
        "quantity"
      ]
    },
    "BedroomConfiguration": {
      "title": "BedroomConfiguration",
      "example": {
        "bedrooms": [
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA113",
                  "count": 1
                },
                {
                  "bedType": "RMA58",
                  "count": 1
                }
              ]
            },
            "type": "Bedroom",
            "privateBathroom": false
          },
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA113",
                  "count": 1
                },
                {
                  "bedType": "RMA58",
                  "count": 1
                }
              ]
            },
            "type": "Bedroom",
            "privateBathroom": false
          },
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA113",
                  "count": 1
                },
                {
                  "bedType": "RMA86",
                  "count": 1
                }
              ]
            },
            "type": "Bedroom",
            "privateBathroom": false
          },
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA113",
                  "count": 1
                }
              ]
            },
            "type": "Bedroom",
            "privateBathroom": false
          },
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA113",
                  "count": 1
                }
              ]
            },
            "type": "Bedroom",
            "privateBathroom": false
          },
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA58",
                  "count": 1
                }
              ]
            },
            "type": "Bedroom",
            "privateBathroom": true
          },
          {
            "beds": {
              "bed": [
                {
                  "bedType": "RMA58",
                  "count": 1
                }
              ]
            },
            "type": "Living Room",
            "privateBathroom": false
          }
        ]
      },
      "type": "object",
      "properties": {
        "bedrooms": {
          "description": "Bedroom configuration for property",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bedroom"
          }
        }
      },
      "required": [
        "bedrooms"
      ]
    },
    "Bedroom": {
      "title": "Bedroom",
      "example": {
        "beds": {
          "bed": [
            {
              "bedType": "RMA113",
              "count": 1
            },
            {
              "bedType": "RMA58",
              "count": 1
            }
          ]
        },
        "type": "Bedroom",
        "privateBathroom": false
      },
      "type": "object",
      "properties": {
        "beds": {
          "$ref": "#/definitions/Beds"
        },
        "type": {
          "$ref": "#/definitions/BedroomTypeEnum"
        },
        "privateBathroom": {
          "description": "Room have private bathroom",
          "type": "boolean"
        }
      },
      "required": [
        "beds",
        "type",
        "privateBathroom"
      ]
    },
    "Beds": {
      "title": "Beds",
      "example": {
        "bed": [
          {
            "bedType": "RMA113",
            "count": 1
          },
          {
            "bedType": "RMA58",
            "count": 1
          }
        ]
      },
      "type": "object",
      "properties": {
        "bed": {
          "description": "List beds per room",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bed"
          }
        }
      },
      "required": [
        "bed"
      ]
    },
    "Bed": {
      "title": "Bed",
      "example": {
        "bedType": "RMA113",
        "count": 1
      },
      "type": "object",
      "properties": {
        "bedType": {
          "description": "Bed code BedTypes are given in Appendix.",
          "type": "string"
        },
        "count": {
          "description": "Number of bed",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "bedType",
        "count"
      ]
    },
    "Policy": {
      "title": "Policy",
      "example": {
        "internetPolicy": {
          "accessInternet": true,
          "kindOfInternet": "WiFi",
          "availableInternet": "AllAreas",
          "chargeInternet": "Free"
        },
        "parkingPolicy": {
          "accessParking": true,
          "locatedParking": "OnSite",
          "privateParking": true,
          "chargeParking": "$ 150",
          "timeCostParking": "PerStay",
          "necessaryReservationParking": "NotPossible"
        },
        "petPolicy": {
          "allowedPets": "Allowed",
          "chargePets": "Free"
        },
        "childrenAllowed": true,
        "smokingAllowed": false
      },
      "type": "object",
      "properties": {
        "internetPolicy": {
          "$ref": "#/definitions/InternetPolicy"
        },
        "parkingPolicy": {
          "$ref": "#/definitions/ParkingPolicy"
        },
        "petPolicy": {
          "$ref": "#/definitions/PetPolicy"
        },
        "childrenAllowed": {
          "description": "Children policy",
          "type": "boolean"
        },
        "smokingAllowed": {
          "description": "Smoking policy",
          "type": "boolean"
        }
      },
      "required": [
        "childrenAllowed",
        "smokingAllowed"
      ]
    },
    "InternetPolicy": {
      "title": "InternetPolicy",
      "example": {
        "accessInternet": true,
        "kindOfInternet": "WiFi",
        "availableInternet": "AllAreas",
        "chargeInternet": "Free"
      },
      "type": "object",
      "properties": {
        "accessInternet": {
          "description": "Access internet into properties",
          "type": "boolean"
        },
        "kindOfInternet": {
          "$ref": "#/definitions/KindofInternetTypeEnum"
        },
        "availableInternet": {
          "$ref": "#/definitions/AvailableInternetEnum"
        },
        "chargeInternet": {
          "description": "Charge internet. Example: âFreeâ, â$ 100â.",
          "type": "string"
        }
      },
      "required": [
        "accessInternet"
      ]
    },
    "ParkingPolicy": {
      "title": "ParkingPolicy",
      "example": {
        "accessParking": true,
        "locatedParking": "OnSite",
        "privateParking": true,
        "chargeParking": "$ 150",
        "timeCostParking": "PerStay",
        "necessaryReservationParking": "NotPossible"
      },
      "type": "object",
      "properties": {
        "accessParking": {
          "description": "Access parking into properties {true,false}",
          "type": "boolean"
        },
        "locatedParking": {
          "$ref": "#/definitions/LocatedParkingTypeEnum"
        },
        "privateParking": {
          "description": "Parking is private or no. {true,false}",
          "type": "boolean"
        },
        "chargeParking": {
          "description": "Charge parking. Example: âFreeâ, â$ 100â.",
          "type": "string"
        },
        "timeCostParking": {
          "$ref": "#/definitions/TimeCostParkingEnum"
        },
        "necessaryReservationParking": {
          "$ref": "#/definitions/ReservationParkingTypeEnum"
        }
      },
      "required": [
        "accessParking"
      ]
    },
    "PetPolicy": {
      "title": "PetPolicy",
      "example": {
        "allowedPets": "Allowed",
        "chargePets": "Free"
      },
      "type": "object",
      "properties": {
        "allowedPets": {
          "$ref": "#/definitions/AllowedPetsTypeEnum"
        },
        "chargePets": {
          "description": "Charge parking. Example: âFreeâ, â$ 100â.",
          "type": "string"
        }
      },
      "required": [
        "allowedPets"
      ]
    },
    "Location": {
      "title": "Location",
      "example": {
        "postalCode": "60606",
        "country": "US",
        "region": "Illinois",
        "city": "Chicago",
        "street": "210 North Wells Street",
        "zipCode9": "60606-1330"
      },
      "type": "object",
      "properties": {
        "postalCode": {
          "description": "Postal code of property (Zip code)",
          "type": "string"
        },
        "country": {
          "description": "Country of property. Require 2 letter ISO code",
          "type": "string"
        },
        "region": {
          "description": "State (Region) of PM. Required for US properties.",
          "type": "string"
        },
        "city": {
          "description": "City of property",
          "type": "string"
        },
        "street": {
          "description": "Street of property",
          "type": "string"
        },
        "zipCode9": {
          "description": "Set only for US properties (format should be zip5-xxxx)",
          "type": "string"
        }
      },
      "required": [
        "postalCode",
        "country",
        "region",
        "city",
        "street",
        "zipCode9"
      ]
    },
    "Create/UpdatePropertyRequest": {
      "title": "Create/UpdatePropertyRequest",
      "description": "Request for Create or Update of Product",
      "example": {
        "data": {
          "name": "Test product",
          "rooms": 5,
          "livingRoom": 2,
          "bathrooms": 4,
          "toilets": 2,
          "totalBeds": 6,
          "supportedLosRates": false,
          "space": 111,
          "spaceUnit": "SQ_FT",
          "persons": 10,
          "childs": 2,
          "latitude": 41.886125,
          "longitude": -87.634233,
          "currency": "EUR",
          "location": {
            "postalCode": "60606",
            "country": "US",
            "region": "Illinois",
            "city": "Chicago",
            "street": "210 North Wells Street",
            "zipCode9": "60606-1330"
          },
          "propertyType": "PCT34",
          "attributesWithQuantity": [
            {
              "attributeId": "HAC312",
              "quantity": 1
            },
            {
              "attributeId": "RMA107",
              "quantity": 1
            },
            {
              "attributeId": "RMA11",
              "quantity": 1
            },
            {
              "attributeId": "RMA149",
              "quantity": 1
            },
            {
              "attributeId": "RMA163",
              "quantity": 1
            },
            {
              "attributeId": "RMA18",
              "quantity": 1
            },
            {
              "attributeId": "RMA19",
              "quantity": 1
            },
            {
              "attributeId": "RMA251",
              "quantity": 1
            },
            {
              "attributeId": "RMA273",
              "quantity": 1
            },
            {
              "attributeId": "RMA32",
              "quantity": 1
            },
            {
              "attributeId": "RMA41",
              "quantity": 1
            },
            {
              "attributeId": "RMA5085",
              "quantity": 1
            },
            {
              "attributeId": "RMA59",
              "quantity": 1
            },
            {
              "attributeId": "RMA6058",
              "quantity": 1
            },
            {
              "attributeId": "RMA68",
              "quantity": 1
            },
            {
              "attributeId": "RMA88",
              "quantity": 1
            }
          ],
          "notes": {
            "description": {
              "texts": [
                {
                  "language": "EN",
                  "value": "Main description on EN!"
                },
                {
                  "language": "ES",
                  "value": "Main description on ES!"
                }
              ]
            },
            "houseRules": {
              "texts": [
                {
                  "language": "EN",
                  "value": "House Rules on EN!"
                },
                {
                  "language": "SR",
                  "value": "House Rules on SR!"
                }
              ]
            },
            "shortDescription": {
              "texts": [
                {
                  "language": "EN",
                  "value": "Short description on EN!"
                },
                {
                  "language": "ES",
                  "value": "short description on ES!"
                }
              ]
            }
          },
          "bedroomConfiguration": {
            "bedrooms": [
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA113",
                      "count": 1
                    },
                    {
                      "bedType": "RMA58",
                      "count": 1
                    }
                  ]
                },
                "type": "Bedroom",
                "privateBathroom": false
              },
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA113",
                      "count": 1
                    },
                    {
                      "bedType": "RMA58",
                      "count": 1
                    }
                  ]
                },
                "type": "Bedroom",
                "privateBathroom": false
              },
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA113",
                      "count": 1
                    },
                    {
                      "bedType": "RMA86",
                      "count": 1
                    }
                  ]
                },
                "type": "Bedroom",
                "privateBathroom": false
              },
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA113",
                      "count": 1
                    }
                  ]
                },
                "type": "Bedroom",
                "privateBathroom": false
              },
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA113",
                      "count": 1
                    }
                  ]
                },
                "type": "Bedroom",
                "privateBathroom": false
              },
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA58",
                      "count": 1
                    }
                  ]
                },
                "type": "Bedroom",
                "privateBathroom": true
              },
              {
                "beds": {
                  "bed": [
                    {
                      "bedType": "RMA58",
                      "count": 1
                    }
                  ]
                },
                "type": "Living Room",
                "privateBathroom": false
              }
            ]
          },
          "policy": {
            "internetPolicy": {
              "accessInternet": true,
              "kindOfInternet": "WiFi",
              "availableInternet": "AllAreas",
              "chargeInternet": "Free"
            },
            "parkingPolicy": {
              "accessParking": true,
              "locatedParking": "OnSite",
              "privateParking": true,
              "chargeParking": "$ 150",
              "timeCostParking": "PerStay",
              "necessaryReservationParking": "NotPossible"
            },
            "petPolicy": {
              "allowedPets": "Allowed",
              "chargePets": "Free"
            },
            "childrenAllowed": true,
            "smokingAllowed": false
          },
          "checkInTime": "16:00:00",
          "checkInToTime": "20:00:00",
          "checkOutTime": "10:00:00"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Property"
        }
      },
      "required": [
        "data"
      ]
    },
    "NearbyAmenity": {
      "title": "NearbyAmenity",
      "example": {
        "attributeId": "ACC203",
        "distance": 3
      },
      "type": "object",
      "properties": {
        "attributeId": {
          "$ref": "#/definitions/NearbyAmenitiesEnum"
        },
        "distance": {
          "description": "Will be set to 0 by default",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "attributeId"
      ]
    },
    "APIResponsewithoutData": {
      "title": "APIResponsewithoutData",
      "description": "Common response for most of functions - where 'data' element is not present.",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": ""
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code"
      ]
    },
    "PropertyListRequest": {
      "title": "PropertyListRequest",
      "description": "Request Model for list of properties",
      "example": {
        "data": [
          1235124636,
          1235124637
        ]
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "List of property IDs (ID from BookingPal system). At least one ID need to be present.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "required": [
        "data"
      ]
    },
    "GetimagelistbyproductID": {
      "title": "GetimagelistbyproductID",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "productId": 1235124634,
            "images": [
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069098.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069098.jpg",
                "sort": 1
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069099.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069099.jpg",
                "sort": 2
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069100.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069100.jpg",
                "sort": 3
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069101.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069101.jpg",
                "sort": 4
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069102.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069102.jpg",
                "sort": 5
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069103.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069103.jpg",
                "sort": 6
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069104.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069104.jpg",
                "sort": 7
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069105.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069105.jpg",
                "sort": 8
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069106.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069106.jpg",
                "sort": 9
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069107.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069107.jpg",
                "sort": 10
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069108.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069108.jpg",
                "sort": 11
              },
              {
                "url": "http://aff.bstatic.com/images/hotel/max500/110/11069109.jpg",
                "tags": [
                  4,
                  5,
                  6
                ],
                "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069109.jpg",
                "sort": 12
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageUrlList"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "Image": {
      "title": "Image",
      "example": {
        "url": "http://aff.bstatic.com/images/hotel/max500/110/11069098.jpg",
        "tags": [
          4,
          5,
          6
        ],
        "urlMbp": "https://s3.amazonaws.com/mybookingpal/pictures/n2ujn/n2ujn/1235124634/11069098.jpg",
        "sort": 1
      },
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the image",
          "type": "string"
        },
        "tags": {
          "description": "imagesText of main description. Tags codes are given in Appendix.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTagsEnum"
          }
        },
        "urlMbp": {
          "description": "URL of the image on MyBookingPal. This field will be only in response. You can not send this in request.",
          "type": "string"
        },
        "sort": {
          "description": "Sort of the image. Image with the lowest sort number will be set as main. This field will be only in response. You can not send this in request.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "url"
      ]
    },
    "CreateimagesRequest": {
      "title": "CreateimagesRequest",
      "example": {
        "data": {
          "productId": 1235124634,
          "image": {
            "url": "http://aff.bstatic.com/images/hotel/max500/110/11069097.jpg",
            "tags": [
              4,
              5,
              6
            ]
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ImageUrlforCreate"
        }
      },
      "required": [
        "data"
      ]
    },
    "ImageUrlforCreate": {
      "title": "ImageUrlforCreate",
      "description": "Model with one image URL for one property used for inserting new image",
      "example": {
        "productId": 1235124634,
        "image": {
          "url": "http://aff.bstatic.com/images/hotel/max500/110/11069097.jpg",
          "tags": [
            4,
            5,
            6
          ]
        }
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "Id of the product",
          "type": "integer",
          "format": "int32"
        },
        "image": {
          "$ref": "#/definitions/Image"
        }
      },
      "required": [
        "productId",
        "image"
      ]
    },
    "DeletelistofimagesRequest": {
      "title": "DeletelistofimagesRequest",
      "example": {
        "data": {
          "productId": 1235124634,
          "images": [
            {
              "url": "https://aff.bstatic.com/images/hotel/max500/110/11069102.jpg"
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ImageUrlList"
        }
      },
      "required": [
        "data"
      ]
    },
    "ImageUrlList": {
      "title": "ImageUrlList",
      "description": "Model with list of URLs for one property",
      "example": {
        "productId": 1235124634,
        "images": [
          {
            "url": "https://aff.bstatic.com/images/hotel/max500/110/11069102.jpg"
          }
        ]
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "Id of the product",
          "type": "integer",
          "format": "int32"
        },
        "images": {
          "description": "Images for property",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "required": [
        "productId",
        "images"
      ]
    },
    "RatesAvailabilityresponse": {
      "title": "RatesAvailabilityresponse",
      "description": "Rates Availability response",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "productId": 1235124634,
            "leadTime": 2,
            "rates": [
              {
                "beginDate": "2020-03-17",
                "endDate": "2021-01-25",
                "amount": 137
              }
            ],
            "minStays": [
              {
                "beginDate": "2020-03-17",
                "endDate": "2021-01-25",
                "minStay": 5
              }
            ],
            "maxStays": [
              {
                "beginDate": "2020-03-17",
                "endDate": "2021-01-25",
                "maxStay": 20
              }
            ],
            "restrictions": [
              {
                "beginDate": "2020-03-23",
                "endDate": "2021-01-25",
                "checkIn": {
                  "monday": false,
                  "tuesday": false,
                  "wednesday": false,
                  "thursday": false,
                  "friday": false,
                  "saturday": true,
                  "sunday": true
                },
                "checkOut": {
                  "monday": false,
                  "tuesday": false,
                  "wednesday": false,
                  "thursday": false,
                  "friday": false,
                  "saturday": true,
                  "sunday": true
                }
              },
              {
                "beginDate": "2021-01-25",
                "endDate": "2021-02-01",
                "checkIn": {
                  "monday": false,
                  "tuesday": true,
                  "wednesday": true,
                  "thursday": true,
                  "friday": true,
                  "saturday": true,
                  "sunday": true
                },
                "checkOut": {
                  "monday": false,
                  "tuesday": true,
                  "wednesday": true,
                  "thursday": true,
                  "friday": true,
                  "saturday": true,
                  "sunday": true
                }
              },
              {
                "beginDate": "2020-03-16",
                "endDate": "2020-03-23",
                "checkIn": {
                  "monday": true,
                  "tuesday": false,
                  "wednesday": false,
                  "thursday": false,
                  "friday": false,
                  "saturday": true,
                  "sunday": true
                },
                "checkOut": {
                  "monday": true,
                  "tuesday": false,
                  "wednesday": false,
                  "thursday": false,
                  "friday": false,
                  "saturday": true,
                  "sunday": true
                }
              }
            ],
            "availabilities": [
              {
                "beginDate": "2020-04-20",
                "endDate": "2020-04-25",
                "availability": false
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of models. This is a deprecated field. It will be removed in version 3.3. (This is only for Create and update requests, so you will not get this data in response). On GET request you will get data here.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RatesAvailability"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "RatesAvailability": {
      "title": "RatesAvailability",
      "description": "Rates Availability model",
      "example": {
        "productId": 1235124634,
        "leadTime": 2,
        "rates": [
          {
            "beginDate": "2020-03-17",
            "endDate": "2021-01-25",
            "amount": 137
          }
        ],
        "minStays": [
          {
            "beginDate": "2020-03-17",
            "endDate": "2021-01-25",
            "minStay": 5
          }
        ],
        "maxStays": [
          {
            "beginDate": "2020-03-17",
            "endDate": "2021-01-25",
            "maxStay": 20
          }
        ],
        "restrictions": [
          {
            "beginDate": "2020-03-23",
            "endDate": "2021-01-25",
            "checkIn": {
              "monday": false,
              "tuesday": false,
              "wednesday": false,
              "thursday": false,
              "friday": false,
              "saturday": true,
              "sunday": true
            },
            "checkOut": {
              "monday": false,
              "tuesday": false,
              "wednesday": false,
              "thursday": false,
              "friday": false,
              "saturday": true,
              "sunday": true
            }
          },
          {
            "beginDate": "2021-01-25",
            "endDate": "2021-02-01",
            "checkIn": {
              "monday": false,
              "tuesday": true,
              "wednesday": true,
              "thursday": true,
              "friday": true,
              "saturday": true,
              "sunday": true
            },
            "checkOut": {
              "monday": false,
              "tuesday": true,
              "wednesday": true,
              "thursday": true,
              "friday": true,
              "saturday": true,
              "sunday": true
            }
          },
          {
            "beginDate": "2020-03-16",
            "endDate": "2020-03-23",
            "checkIn": {
              "monday": true,
              "tuesday": false,
              "wednesday": false,
              "thursday": false,
              "friday": false,
              "saturday": true,
              "sunday": true
            },
            "checkOut": {
              "monday": true,
              "tuesday": false,
              "wednesday": false,
              "thursday": false,
              "friday": false,
              "saturday": true,
              "sunday": true
            }
          }
        ],
        "availabilities": [
          {
            "beginDate": "2020-04-20",
            "endDate": "2020-04-25",
            "availability": false
          }
        ]
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "ID of the product",
          "type": "integer",
          "format": "int32"
        },
        "leadTime": {
          "description": "Number of days before reservation in which reservation couldnât be made. Allowed values are 0-7. If this value is set on property level - it will be used before than value on PM level.",
          "type": "integer",
          "format": "int32"
        },
        "rates": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rate"
          }
        },
        "minStays": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MinStayModel"
          }
        },
        "maxStays": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaxStayModel"
          }
        },
        "restrictions": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Restriction"
          }
        },
        "availabilities": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailabilityModel"
          }
        },
        "availableCount": {
          "description": "List of models (Only for MLT properties)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableCount"
          }
        }
      },
      "required": [
        "productId"
      ]
    },
    "Rate": {
      "title": "Rate",
      "example": {
        "beginDate": "2020-03-17",
        "endDate": "2021-01-25",
        "amount": 137
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Beginning date of date range for which rate is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of date range for which rate is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "amount": {
          "description": "Value of rate, needs to be higher than 0, otherwise it will not be imported",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "amount"
      ]
    },
    "MinStayModel": {
      "title": "MinStayModel",
      "description": "MinStay model",
      "example": {
        "beginDate": "2020-03-17",
        "endDate": "2021-01-25",
        "minStay": 5
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Beginning date of date range for which min stay is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of date range for which min stay is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "minStay": {
          "description": "Number of days that will be applied for min stay",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "minStay"
      ]
    },
    "MaxStayModel": {
      "title": "MaxStayModel",
      "example": {
        "beginDate": "2020-03-17",
        "endDate": "2021-01-25",
        "maxStay": 20
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Beginning date of date range for which max stay is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of date range for which max stay is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "maxStay": {
          "description": "Number of days that will be applied for max stay",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "maxStay"
      ]
    },
    "Restriction": {
      "title": "Restriction",
      "example": {
        "beginDate": "2020-03-23",
        "endDate": "2021-01-25",
        "checkIn": {
          "monday": false,
          "tuesday": false,
          "wednesday": false,
          "thursday": false,
          "friday": false,
          "saturday": true,
          "sunday": true
        },
        "checkOut": {
          "monday": false,
          "tuesday": false,
          "wednesday": false,
          "thursday": false,
          "friday": false,
          "saturday": true,
          "sunday": true
        }
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Beginning date of date range for which restriction is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of date range for which restriction is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "checkIn": {
          "$ref": "#/definitions/CheckIn"
        },
        "checkOut": {
          "$ref": "#/definitions/CheckOut"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "checkIn",
        "checkOut"
      ]
    },
    "CheckIn": {
      "title": "CheckIn",
      "example": {
        "monday": false,
        "tuesday": false,
        "wednesday": false,
        "thursday": false,
        "friday": false,
        "saturday": true,
        "sunday": true
      },
      "type": "object",
      "properties": {
        "monday": {
          "description": "Determines if check in could be made on monday",
          "type": "boolean"
        },
        "tuesday": {
          "description": "Determines if check in could be made on tuesday",
          "type": "boolean"
        },
        "wednesday": {
          "description": "Determines if check in could be made on wednesday",
          "type": "boolean"
        },
        "thursday": {
          "description": "Determines if check in could be made on thursday",
          "type": "boolean"
        },
        "friday": {
          "description": "Determines if check in could be made on friday",
          "type": "boolean"
        },
        "saturday": {
          "description": "Determines if check in could be made on saturday",
          "type": "boolean"
        },
        "sunday": {
          "description": "Determines if check in could be made on sunday",
          "type": "boolean"
        }
      },
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ]
    },
    "CheckOut": {
      "title": "CheckOut",
      "example": {
        "monday": false,
        "tuesday": false,
        "wednesday": false,
        "thursday": false,
        "friday": false,
        "saturday": true,
        "sunday": true
      },
      "type": "object",
      "properties": {
        "monday": {
          "description": "Determines if check out could be made on monday",
          "type": "boolean"
        },
        "tuesday": {
          "description": "Determines if check out could be made on tuesday",
          "type": "boolean"
        },
        "wednesday": {
          "description": "Determines if check out could be made on wednesday",
          "type": "boolean"
        },
        "thursday": {
          "description": "Determines if check out could be made on thursday",
          "type": "boolean"
        },
        "friday": {
          "description": "Determines if check out could be made on friday",
          "type": "boolean"
        },
        "saturday": {
          "description": "Determines if check out could be made on saturday",
          "type": "boolean"
        },
        "sunday": {
          "description": "Determines if check out could be made on sunday",
          "type": "boolean"
        }
      },
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ]
    },
    "AvailabilityModel": {
      "title": "AvailabilityModel",
      "example": {
        "beginDate": "2020-04-20",
        "endDate": "2020-04-25",
        "availability": false
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Beginning date of date range for which availability is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of date range for which availability is applied. Additional clarification: If you have reservation from 2020/08/05 - 2020/08/09, so checkout is on 2020/08/09 - you should send end date 2020/08/08, since 2020/08/09 is actually open for new reservation. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "availability": {
          "description": "Determines if the dates are available or not. Our system saves only not available dates, so it is enough that you sent only not available dates. But if you want to open dates that you previously sent that are not available, you need to send that these dates are available over API.",
          "type": "boolean"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "availability"
      ]
    },
    "CreateandupdateratesandavailabilityRequest": {
      "title": "CreateandupdateratesandavailabilityRequest",
      "example": {
        "data": {
          "productId": 1235124634,
          "leadTime": 2,
          "rates": [
            {
              "beginDate": "2020-01-20",
              "endDate": "2021-01-25",
              "amount": 137.0
            }
          ],
          "minStays": [
            {
              "beginDate": "2020-01-20",
              "endDate": "2021-01-25",
              "minStay": 5
            }
          ],
          "maxStays": [
            {
              "beginDate": "2020-01-20",
              "endDate": "2021-01-25",
              "maxStay": 20
            }
          ],
          "restrictions": [
            {
              "beginDate": "2020-01-20",
              "endDate": "2021-01-25",
              "checkIn": {
                "monday": false,
                "tuesday": false,
                "wednesday": false,
                "thursday": false,
                "friday": false,
                "saturday": true,
                "sunday": true
              },
              "checkOut": {
                "monday": false,
                "tuesday": false,
                "wednesday": false,
                "thursday": false,
                "friday": false,
                "saturday": true,
                "sunday": true
              }
            }
          ],
          "availabilities": [
            {
              "beginDate": "2020-04-20",
              "endDate": "2020-04-25",
              "availability": false
            },
            {
              "beginDate": "2020-04-26",
              "endDate": "2020-04-28",
              "availability": true
            }
          ],
          "availableCount": [
            {
              "beginDate": "2020-04-20",
              "endDate": "2020-04-25",
              "count": 3
            },
            {
              "beginDate": "2020-04-26",
              "endDate": "2020-04-28",
              "count": 4
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/RatesAvailability"
        }
      },
      "required": [
        "data"
      ]
    },
    "AvailableCount": {
      "title": "AvailableCount",
      "example": {
        "beginDate": "2020-04-20",
        "endDate": "2020-04-25",
        "count": 3
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Beginning date of date range for which count is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "End date of date range for which count  is applied. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "count": {
          "description": "Number of available rooms",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "count"
      ]
    },
    "CreateandupdateLOSRequest": {
      "title": "CreateandupdateLOSRequest",
      "example": {
        "data": {
          "productId": 1235124634,
          "losRates": [
            {
              "checkInDate": "2020-06-20",
              "maxGuests": 3,
              "losValue": [
                100.0,
                150.0,
                200.0,
                250.0,
                300.0,
                0.0,
                0.0,
                450.0,
                500.0,
                550.0,
                600.0,
                650.0,
                700.0,
                750.0,
                800.0,
                850.0,
                900.0,
                950.0,
                550.0,
                510.0,
                570.0,
                520.0,
                500.0,
                510.0,
                590.0,
                121.0,
                122.0,
                123.0
              ]
            },
            {
              "checkInDate": "2020-05-21",
              "maxGuests": 4,
              "losValue": [
                111.0,
                112.0,
                123.0,
                250.0,
                300.0,
                350.0,
                400.0,
                450.0,
                500.0,
                550.0,
                600.0,
                650.0,
                700.0,
                750.0,
                800.0,
                850.0,
                900.0,
                950.0,
                550.0,
                510.0,
                570.0,
                520.0,
                500.0,
                510.0,
                590.0,
                580.0,
                560.0,
                540.0
              ]
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/LosRatesProduct"
        }
      },
      "required": [
        "data"
      ]
    },
    "LosRatesProduct": {
      "title": "LosRatesProduct",
      "description": "Model for product LOS rates",
      "example": {
        "productId": 1235124634,
        "losRates": [
          {
            "checkInDate": "2020-06-20",
            "maxGuests": 3,
            "losValue": [
              100.0,
              150.0,
              200.0,
              250.0,
              300.0,
              0.0,
              0.0,
              450.0,
              500.0,
              550.0,
              600.0,
              650.0,
              700.0,
              750.0,
              800.0,
              850.0,
              900.0,
              950.0,
              550.0,
              510.0,
              570.0,
              520.0,
              500.0,
              510.0,
              590.0,
              121.0,
              122.0,
              123.0
            ]
          },
          {
            "checkInDate": "2020-05-21",
            "currency": "USD",
            "maxGuests": 4,
            "losValue": [
              111.0,
              112.0,
              123.0,
              250.0,
              300.0,
              350.0,
              400.0,
              450.0,
              500.0,
              550.0,
              600.0,
              650.0,
              700.0,
              750.0,
              800.0,
              850.0,
              900.0,
              950.0,
              550.0,
              510.0,
              570.0,
              520.0,
              500.0,
              510.0,
              590.0,
              580.0,
              560.0,
              540.0
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "ID of the product",
          "type": "integer",
          "format": "int32"
        },
        "losRates": {
          "description": "List of models. Max size array for LosRates object 1000",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LosRate"
          }
        }
      },
      "required": [
        "productId",
        "losRates"
      ]
    },
    "LosRate": {
      "title": "LosRate",
      "description": "Model for LOS (Length of stay) rates",
      "example": {
        "checkInDate": "2020-06-20",
        "maxGuests": 3,
        "losValue": [
          100.0,
          150.0,
          200.0,
          250.0,
          300.0,
          0.0,
          0.0,
          450.0,
          500.0,
          550.0,
          600.0,
          650.0,
          700.0,
          750.0,
          800.0,
          850.0,
          900.0,
          950.0,
          550.0,
          510.0,
          570.0,
          520.0,
          500.0,
          510.0,
          590.0,
          121.0,
          122.0,
          123.0
        ]
      },
      "type": "object",
      "properties": {
        "checkInDate": {
          "description": "Check-in Date. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "maxGuests": {
          "description": "Max guests for check in date",
          "type": "integer",
          "format": "int32"
        },
        "losValue": {
          "description": "List rates value per day. First value is for reservation for 1 day. Secoon. If you do not support booking for some specific number of days, set value 0 for that element in array.nd value is for reservation for 2 days, and so on. If you do not support booking for some specific number of days, set value 0 for that element in array.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "currency": {
          "description": "Currency for rates. It will be visiable only in GET response. You should not set this field in request since we will use product currency for every rate.",
          "type": "string"
        }
      },
      "required": [
        "checkInDate",
        "maxGuests",
        "losValue"
      ]
    },
    "LOSratesresponse": {
      "title": "LOSratesresponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "productId": 1235124634,
            "losRates": [
              {
                "checkInDate": "2020-05-21",
                "currency": "RSD",
                "maxGuests": 4,
                "losValue": [
                  111,
                  112,
                  123,
                  250,
                  300,
                  350,
                  400,
                  450,
                  500,
                  550,
                  600,
                  650,
                  700,
                  750,
                  800,
                  850,
                  900,
                  950,
                  550,
                  510,
                  570,
                  520,
                  500,
                  510,
                  590,
                  580,
                  560,
                  540,
                  0,
                  0
                ]
              },
              {
                "checkInDate": "2020-06-20",
                "currency": "RSD",
                "maxGuests": 3,
                "losValue": [
                  100,
                  150,
                  200,
                  250,
                  300,
                  0,
                  0,
                  450,
                  500,
                  550,
                  600,
                  650,
                  700,
                  750,
                  800,
                  850,
                  900,
                  950,
                  550,
                  510,
                  570,
                  520,
                  500,
                  510,
                  590,
                  121,
                  122,
                  123,
                  0,
                  0
                ]
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LosRatesProduct"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "FeeTaxResponse": {
      "title": "FeeTaxResponse",
      "description": "Response for Create or Get FeeTax API call",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "productId": 1235124634,
            "fees": [
              {
                "beginDate": "2020-02-26",
                "endDate": "2020-12-12",
                "entityType": "OPTIONAL",
                "feeType": "GENERAL",
                "option": 3,
                "name": "RetestFeeHF",
                "taxType": "TAXABLE",
                "unit": "PER_DAY_PER_PERSON_EXTRA",
                "value": 88,
                "valueType": "PERCENT"
              }
            ],
            "taxes": [
              {
                "name": "Tax reTestAT",
                "type": "SalesTaxIncluded",
                "value": 55,
                "altId": "11"
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "Text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeTax"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "FeeTax": {
      "title": "FeeTax",
      "example": {
        "productId": 1235124634,
        "fees": [
          {
            "beginDate": "2020-02-26",
            "endDate": "2020-12-12",
            "entityType": "OPTIONAL",
            "feeType": "GENERAL",
            "option": 3,
            "name": "RetestFeeHF",
            "taxType": "TAXABLE",
            "unit": "PER_DAY_PER_PERSON_EXTRA",
            "value": 88,
            "valueType": "PERCENT"
          }
        ],
        "taxes": [
          {
            "name": "Tax reTestAT",
            "type": "SalesTaxIncluded",
            "value": 55,
            "altId": "11"
          }
        ]
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "ID of the product",
          "type": "integer",
          "format": "int32"
        },
        "fees": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "taxes": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Taxes"
          }
        }
      },
      "required": [
        "productId"
      ]
    },
    "Fee": {
      "title": "Fee",
      "example": {
        "beginDate": "2020-02-26",
        "endDate": "2020-12-12",
        "entityType": "OPTIONAL",
        "feeType": "GENERAL",
        "option": 3,
        "name": "RetestFeeHF",
        "taxType": "TAXABLE",
        "unit": "PER_DAY_PER_PERSON_EXTRA",
        "value": 88,
        "valueType": "PERCENT"
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "Fee applies from Date. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "Fee applies to Date. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "entityType": {
          "$ref": "#/definitions/FeeEntityTypeEnum"
        },
        "feeType": {
          "$ref": "#/definitions/FeeTypeEnum"
        },
        "option": {
          "description": "Number of guests when set extra person fee. Only values >0 are allowed.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Fee name.  For example: Extra person, Cleaning fee, Parking etc.",
          "type": "string"
        },
        "taxType": {
          "$ref": "#/definitions/FeetaxTypeEnum"
        },
        "unit": {
          "$ref": "#/definitions/FeeUnitEnum"
        },
        "value": {
          "description": "Fee value",
          "type": "number",
          "format": "double"
        },
        "valueType": {
          "$ref": "#/definitions/FeeValueTypeEnum"
        },
        "altId": {
          "description": "Alternative Id of the fee (fee id in your system)",
          "type": "string"
        }
      },
      "required": [
        "entityType",
        "feeType",
        "name",
        "unit",
        "value",
        "valueType"
      ]
    },
    "Taxes": {
      "title": "Taxes",
      "example": {
        "name": "Tax reTestAT",
        "type": "SalesTaxIncluded",
        "value": 55,
        "altId": "11"
      },
      "type": "object",
      "properties": {
        "name": {
          "description": "Tax name",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/TaxisTypeEnum"
        },
        "value": {
          "description": "Tax value",
          "type": "number",
          "format": "double"
        },
        "altId": {
          "description": "Alternative Id of the tax (tax id in your system)",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "CreatefeeandtaxRequest": {
      "title": "CreatefeeandtaxRequest",
      "example": {
        "data": {
          "productId": 1235124634,
          "fees": [
            {
              "entityType": "OPTIONAL",
              "feeType": "GENERAL",
              "option": 3,
              "name": "RetestFeeHF",
              "beginDate": "2020-02-26",
              "endDate": "2020-12-12",
              "taxType": "TAXABLE",
              "unit": "PER_DAY_PER_PERSON_EXTRA",
              "value": 88,
              "valueType": "PERCENT"
            }
          ],
          "taxes": [
            {
              "name": "Tax reTestAT",
              "type": "SalesTaxIncluded",
              "value": 55,
              "altId": "11"
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FeeTax"
        }
      },
      "required": [
        "data"
      ]
    },
    "FeeTaxValidationSettingResponse": {
      "title": "FeeTaxValidationSettingResponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "validationSettings": [
              {
                "productId": 1235124634,
                "isFeeMandatory": false,
                "isTaxMandatory": false
              },
              {
                "productId": 1235124636,
                "isFeeMandatory": true,
                "isTaxMandatory": true
              },
              {
                "productId": 1235124637,
                "isFeeMandatory": true,
                "isTaxMandatory": true
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "Text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeTaxValidationSettings"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "FeeTaxValidationSettings": {
      "title": "FeeTaxValidationSettings",
      "example": {
        "validationSettings": [
          {
            "productId": 1235124634,
            "isFeeMandatory": false,
            "isTaxMandatory": false
          },
          {
            "productId": 1235124636,
            "isFeeMandatory": true,
            "isTaxMandatory": true
          },
          {
            "productId": 1235124637,
            "isFeeMandatory": true,
            "isTaxMandatory": true
          }
        ]
      },
      "type": "object",
      "properties": {
        "validationSettings": {
          "description": "Model",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeTaxMandatorySetting"
          }
        }
      },
      "required": [
        "validationSettings"
      ]
    },
    "FeeTaxMandatorySetting": {
      "title": "FeeTaxMandatorySetting",
      "example": {
        "productId": 1235124634,
        "isFeeMandatory": false,
        "isTaxMandatory": false
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "Product id",
          "type": "integer",
          "format": "int32"
        },
        "isFeeMandatory": {
          "description": "Fee is mandatory",
          "type": "boolean"
        },
        "isTaxMandatory": {
          "description": "Tax is mandatory",
          "type": "boolean"
        }
      },
      "required": [
        "productId",
        "isFeeMandatory",
        "isTaxMandatory"
      ]
    },
    "SetfeeandtaxvalidationsettingRequest": {
      "title": "SetfeeandtaxvalidationsettingRequest",
      "description": "This is a request for setting or updating fee and tax validation setting per property",
      "example": {
        "data": {
          "validationSettings": [
            {
              "productId": 1235124634,
              "isFeeMandatory": false,
              "isTaxMandatory": false
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FeeTaxValidationSettings"
        }
      },
      "required": [
        "data"
      ]
    },
    "Yieldresponse": {
      "title": "Yieldresponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "productId": 1235124634,
            "weekend": [
              {
                "beginDate": "2020-03-17",
                "endDate": "2021-02-15",
                "amount": 18,
                "modifier": "DECREASE_PERCENT",
                "weekendParam": "DAYS_OF_WEEKEND_SAT_SUN"
              }
            ],
            "lengthOfStay": [
              {
                "beginDate": "2020-03-17",
                "endDate": "2021-02-15",
                "amount": 34,
                "modifier": "INCREASE_AMOUNT",
                "param": 7
              }
            ],
            "dateRange": [
              {
                "beginDate": "2020-04-10",
                "endDate": "2020-04-15",
                "amount": 35,
                "modifier": "INCREASE_AMOUNT"
              },
              {
                "beginDate": "2020-05-16",
                "endDate": "2020-05-25",
                "amount": 25,
                "modifier": "INCREASE_PERCENT"
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportYield"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "TransportYield": {
      "title": "TransportYield",
      "example": {
        "productId": 1235124634,
        "weekend": [
          {
            "beginDate": "2020-03-17",
            "endDate": "2021-02-15",
            "amount": 18,
            "modifier": "DECREASE_PERCENT",
            "weekendParam": "DAYS_OF_WEEKEND_SAT_SUN"
          }
        ],
        "lengthOfStay": [
          {
            "beginDate": "2020-03-17",
            "endDate": "2021-02-15",
            "amount": 34,
            "modifier": "INCREASE_AMOUNT",
            "param": 7
          }
        ],
        "dateRange": [
          {
            "beginDate": "2020-04-10",
            "endDate": "2020-04-15",
            "amount": 35,
            "modifier": "INCREASE_AMOUNT"
          },
          {
            "beginDate": "2020-05-16",
            "endDate": "2020-05-25",
            "amount": 25,
            "modifier": "INCREASE_PERCENT"
          }
        ]
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "ID of the product",
          "type": "integer",
          "format": "int32"
        },
        "weekend": {
          "description": "Set a specific date range in which you would like to manipulate the basic price per night on weekends.  For example you will set the YMR date range from 01.07.2016-31.07.2016 param - (Friday, Saturday=0; Saturday, Sunday=1) yield amount = 20 modifier - Increase Percent Price per night in the period from 01.07.2016 to 31.07.2016 will be 100 USD in working days and 100 + 20% = 120 USD in weekends (Friday, Saturday or Saturday, Sunday, depending on what was selected).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Yield"
          }
        },
        "lengthOfStay": {
          "description": "Automatically applies price modifications to inquiries based on the number of nights the inquiries are for.  For example you will set the YMR date range from 01.07.2016-31.07.2017 param - {Length of Stay}. Letâs say you set 15 days. yield amount = 5 modifier - Decrease Percent Price per night if you made a reservation for 15 or more days will be 100 - 5% = 95 USD",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Yield"
          }
        },
        "dateRange": {
          "description": "Set a specific date range in which you would like to manipulate the basic price per night.  For example you will set the YMR date range from 01.07.2016-31.07.2016 yield amount = 20 modifier - Increase Percent Price per night in the period from 01.07.2016 to 31.07.2016 will be 100 + 20% = 120 USD",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Yield"
          }
        }
      },
      "required": [
        "productId"
      ]
    },
    "Yield": {
      "title": "Yield",
      "example": {
        "beginDate": "2020-03-17",
        "endDate": "2021-02-15",
        "amount": 18,
        "modifier": "DECREASE_PERCENT",
        "weekendParam": "DAYS_OF_WEEKEND_SAT_SUN"
      },
      "type": "object",
      "properties": {
        "beginDate": {
          "description": "From date. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "description": "To date. Date should be in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "amount": {
          "description": "Yield amount",
          "type": "number",
          "format": "double"
        },
        "modifier": {
          "$ref": "#/definitions/YieldmodifierEnum"
        },
        "weekendParam": {
          "$ref": "#/definitions/WeekendParamEnum"
        },
        "param": {
          "description": "Parameter. It can verify depending on what YMR was set. More details about params you can see in the description above.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "beginDate",
        "endDate",
        "amount",
        "modifier"
      ]
    },
    "CreateYieldRequest": {
      "title": "CreateYieldRequest",
      "example": {
        "data": {
          "productId": 1235124634,
          "weekend": [
            {
              "beginDate": "2020-02-10",
              "endDate": "2021-02-15",
              "amount": 18.0,
              "modifier": "DECREASE_PERCENT",
              "weekendParam": "DAYS_OF_WEEKEND_SAT_SUN"
            }
          ],
          "lengthOfStay": [
            {
              "beginDate": "2020-02-10",
              "endDate": "2021-02-15",
              "amount": 34.0,
              "modifier": "INCREASE_AMOUNT",
              "param": 7
            }
          ],
          "dateRange": [
            {
              "beginDate": "2020-04-10",
              "endDate": "2020-04-15",
              "amount": 35.0,
              "modifier": "INCREASE_AMOUNT"
            },
            {
              "beginDate": "2020-05-16",
              "endDate": "2020-05-25",
              "amount": 25.0,
              "modifier": "INCREASE_PERCENT"
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TransportYield"
        }
      },
      "required": [
        "data"
      ]
    },
    "ValidationforListofpropertiesRequest": {
      "title": "ValidationforListofpropertiesRequest",
      "example": {
        "data": {
          "productIds": [
            1235124634,
            1235124636
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Validation-PropertyIDsList"
        }
      },
      "required": [
        "data"
      ]
    },
    "Validation-PropertyIDsList": {
      "title": "Validation-PropertyIDsList",
      "example": {
        "productIds": [
          1235124634,
          1235124636
        ]
      },
      "type": "object",
      "properties": {
        "productIds": {
          "description": "List of properties for validation",
          "example": [
            1235124634
          ],
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "required": [
        "productIds"
      ]
    },
    "ThreadsModel": {
      "title": "ThreadsModel",
      "example": {
        "threads": [
          {
            "id": 68241,
            "lastMessageSentAt": "2019-12-03 00:00:00",
            "lastMessageText": "Message KHSroelMoR",
            "channelName": "AirBnB",
            "channelABB": "ABB",
            "guestName": "Test Guest Name 2 ",
            "guestEmailAddress": "autoeelcbl@atxjarv.uri",
            "productId": 1235124634,
            "reservationId": 119557886,
            "dateFrom": "2019-12-02",
            "dateTo": "2019-12-04"
          },
          {
            "id": 68257,
            "lastMessageSentAt": "2019-12-03 00:00:00",
            "lastMessageText": "Message ytgdVvQpQm",
            "channelName": "AirBnB",
            "channelABB": "ABB",
            "guestName": "Test Guest Name 1",
            "guestEmailAddress": "autoppresf@at81.sla",
            "productId": 1235124634,
            "dateFrom": "2019-12-02",
            "dateTo": "2019-12-04"
          }
        ]
      },
      "type": "object",
      "properties": {
        "threads": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Thread"
          }
        }
      },
      "required": [
        "threads"
      ]
    },
    "Thread": {
      "title": "Thread",
      "example": {
        "id": 68241,
        "lastMessageSentAt": "2019-12-03 00:00:00",
        "lastMessageText": "Message KHSroelMoR",
        "channelName": "AirBnB",
        "channelABB": "ABB",
        "guestName": "Test Guest Name 2 ",
        "guestEmailAddress": "autoeelcbl@atxjarv.uri",
        "productId": 1235124634,
        "reservationId": 119557886,
        "dateFrom": "2019-12-02",
        "dateTo": "2019-12-04"
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "Thread ID",
          "type": "integer",
          "format": "int32"
        },
        "lastMessageSentAt": {
          "description": "Time when last message was sent",
          "type": "string"
        },
        "lastMessageText": {
          "description": "Last message text",
          "type": "string"
        },
        "channelName": {
          "description": "Channel from where come reservation",
          "type": "string"
        },
        "channelABB": {
          "$ref": "#/definitions/ChannelABBEnum"
        },
        "guestName": {
          "description": "Name of guest",
          "type": "string"
        },
        "guestEmailAddress": {
          "description": "Email of guest",
          "type": "string"
        },
        "productId": {
          "description": "ID of product in BookingPal database",
          "type": "integer",
          "format": "int32"
        },
        "reservationId": {
          "description": "ID of reservation",
          "type": "integer",
          "format": "int32"
        },
        "dateFrom": {
          "description": "Start date of reservation. Date is in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        },
        "dateTo": {
          "description": "End date of reservation. Date is in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "id",
        "lastMessageSentAt",
        "lastMessageText",
        "channelName",
        "channelABB",
        "guestName",
        "guestEmailAddress",
        "productId",
        "dateFrom",
        "dateTo"
      ]
    },
    "MessageRequestFromSupplier": {
      "title": "MessageRequestFromSupplier",
      "example": {
        "threadId": 5656,
        "message": "new message"
      },
      "type": "object",
      "properties": {
        "threadId": {
          "description": "ID of thread",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Message text",
          "type": "string"
        }
      },
      "required": [
        "threadId",
        "message"
      ]
    },
    "GetmessagethreadsResponse": {
      "title": "GetmessagethreadsResponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "threads": []
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "Text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "Text info message",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThreadsModel"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "GetmessagelistforspecificthreadResponse": {
      "title": "GetmessagelistforspecificthreadResponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "messages": [
              {
                "message": "Test message",
                "createdAt": "2019-11-25 12:32:39",
                "user": "PROPERTY_MANAGER"
              }
            ]
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "Text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessagesModel"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "MessagesModel": {
      "title": "MessagesModel",
      "description": "List of messages Model",
      "example": {
        "messages": [
          {
            "message": "Test message",
            "createdAt": "2019-11-25 12:32:39",
            "user": "PROPERTY_MANAGER"
          }
        ]
      },
      "type": "object",
      "properties": {
        "messages": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageModel"
          }
        }
      },
      "required": [
        "messages"
      ]
    },
    "MessageModel": {
      "title": "MessageModel",
      "description": "Model for one message",
      "example": {
        "message": "Test message",
        "createdAt": "2019-11-25 12:32:39",
        "user": "PROPERTY_MANAGER"
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "Message text",
          "type": "string"
        },
        "createdAt": {
          "description": "Time when message created",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserEnum"
        }
      },
      "required": [
        "message",
        "createdAt",
        "user"
      ]
    },
    "PostnewmessageforspecificthreadRequest": {
      "title": "PostnewmessageforspecificthreadRequest",
      "example": {
        "data": {
          "threadId": 5656,
          "message": "New message"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/MessageRequestFromSupplier"
        }
      },
      "required": [
        "data"
      ]
    },
    "RequesttoBook-AnswerfromPMSRequest": {
      "title": "RequesttoBook-AnswerfromPMSRequest",
      "example": {
        "data": {
          "requestToBookType": "DENY",
          "requestToBookDeclineReasonType": "DATES_NOT_AVAILABLE",
          "declineMessageToGuest": "these dates are not available any more. ",
          "reservationId": 1235124634
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FunctionsRequestToBook"
        }
      },
      "required": [
        "data"
      ]
    },
    "FunctionsRequestToBook": {
      "title": "FunctionsRequestToBook",
      "description": "Request to book answer model",
      "example": {
        "requestToBookType": "DENY",
        "requestToBookDeclineReasonType": "DATES_NOT_AVAILABLE",
        "declineMessageToGuest": "these dates are not available any more. ",
        "reservationId": 1235124634
      },
      "type": "object",
      "properties": {
        "requestToBookType": {
          "$ref": "#/definitions/RequestToBookTypeEnum"
        },
        "requestToBookDeclineReasonType": {
          "$ref": "#/definitions/RequestToBookDeclineReasonTypeEnum"
        },
        "declineMessageToGuest": {
          "description": "Message to guest",
          "type": "string"
        },
        "reservationId": {
          "description": "Reservation for request to book",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "requestToBookType",
        "reservationId"
      ]
    },
    "RequesttoBook-TestRequest": {
      "title": "RequesttoBook-TestRequest",
      "example": {
        "data": {
          "action": "RESERVATION_REQUEST_VOIDED",
          "productId": 1235124634
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/FunctionsRequestToBookTest"
        }
      },
      "required": [
        "data"
      ]
    },
    "FunctionsRequestToBookTest": {
      "title": "FunctionsRequestToBookTest",
      "example": {
        "action": "RESERVATION_REQUEST_VOIDED",
        "productId": 1235124634
      },
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/RequesttoBookTestActionEnum"
        },
        "productId": {
          "description": "Product id for test request to book",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "action",
        "productId"
      ]
    },
    "PushNotificationLinksRequest": {
      "title": "PushNotificationLinksRequest",
      "example": {
        "data": {
          "bookLink": "https://newreservationnotification.link",
          "cancelLink": "https://cancelreservation.link",
          "asyncPush": "https://asyncpush.link",
          "requestToBook": "https://requestToBook.link"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PushNotificationLinksModel"
        }
      },
      "required": [
        "data"
      ]
    },
    "PushNotificationLinksModel": {
      "title": "PushNotificationLinksModel",
      "description": "Model for push notification links",
      "example": {
        "bookLink": "https://newreservationnotification.link",
        "cancelLink": "https://cancelreservation.link",
        "asyncPush": "https://asyncpush.link",
        "requestToBook": "https://requestToBook.link"
      },
      "type": "object",
      "properties": {
        "bookLink": {
          "description": "Link for getting notifications about new reservations",
          "type": "string"
        },
        "cancelLink": {
          "description": "Link for getting notification about cancel reservation",
          "type": "string"
        },
        "asyncPush": {
          "description": "Link for push data for async messages",
          "type": "string"
        },
        "requestToBook": {
          "description": "Link for request to book for AirBnb",
          "type": "string"
        }
      },
      "required": [
        "bookLink",
        "cancelLink"
      ]
    },
    "PushNotificationLinksResponse": {
      "title": "PushNotificationLinksResponse",
      "example": {
        "message": "",
        "errorMessage": [],
        "is_error": false,
        "code": "",
        "data": [
          {
            "bookLink": "https://newreservationnotification.link",
            "cancelLink": "https://cancelreservation.link",
            "asyncPush": "https://asyncpush.link",
            "requestToBook": "https://requestToBook.link"
          }
        ]
      },
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of error messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushNotificationLinksModel"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "PaymentPolicyTypeEnum": {
      "title": "PaymentPolicyTypeEnum",
      "description": "Full or Split payment. In case of Split payment - it will be 2 payments. [SPLIT,FULL]",
      "type": "string",
      "enum": [
        "SPLIT",
        "FULL"
      ]
    },
    "DepositTypeEnum": {
      "title": "DepositTypeEnum",
      "description": "First payment deposit type.",
      "type": "string",
      "enum": [
        "PERCENTAGE",
        "FLAT",
        "NON"
      ]
    },
    "TypeEnum": {
      "title": "TypeEnum",
      "description": "Cancellation policy type. [FULLY_REFUNDABLE,NON_REFUNDABLE,MANUAL]",
      "type": "string",
      "enum": [
        "FULLY_REFUNDABLE",
        "NON_REFUNDABLE",
        "MANUAL"
      ]
    },
    "CancellationPolicyTypeEnum": {
      "title": "CancellationPolicyTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "FULLY_REFUNDABLE",
        "NON_REFUNDABLE",
        "MANUAL"
      ]
    },
    "ManualPolicyTypeEnum": {
      "title": "ManualPolicyTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "PERCENTAGE",
        "FLAT"
      ]
    },
    "PaymentTypeEnum": {
      "title": "PaymentTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "CREDIT_CARD",
        "MAIL_CHECK",
        "BOOKING_PAL_MOR"
      ]
    },
    "CreditCardTypeEnum": {
      "title": "CreditCardTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "TRANSMIT",
        "POST"
      ]
    },
    "CreditCardListEnum": {
      "title": "CreditCardListEnum",
      "description": "",
      "type": "string",
      "enum": [
        "MASTER_CARD",
        "VISA",
        "AMERICAN_EXPRESS",
        "DINERS_CLUB",
        "DISCOVER"
      ]
    },
    "PaymentGatewaysTypeEnum": {
      "title": "PaymentGatewaysTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "PAYPAL",
        "AUTHORIZE_NET",
        "BRIDGE_PAY",
        "PAY_BOX",
        "DIBS",
        "O_GONE",
        "DOC_DATA",
        "PAY_GATE"
      ]
    },
    "BedroomTypeEnum": {
      "title": "BedroomTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "Bedroom",
        "Living Room"
      ]
    },
    "KindofInternetTypeEnum": {
      "title": "KindofInternetTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "WiFi",
        "Wired"
      ]
    },
    "AvailableInternetEnum": {
      "title": "AvailableInternetEnum",
      "description": "",
      "type": "string",
      "enum": [
        "AllAreas",
        "BusinessCenter",
        "SomeRooms"
      ]
    },
    "LocatedParkingTypeEnum": {
      "title": "LocatedParkingTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "OnSite",
        "Nearby"
      ]
    },
    "TimeCostParkingEnum": {
      "title": "TimeCostParkingEnum",
      "description": "",
      "type": "string",
      "enum": [
        "PerHour",
        "PerWeek",
        "PerStay",
        "PerDay"
      ]
    },
    "ReservationParkingTypeEnum": {
      "title": "ReservationParkingTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "NoReservationNeeded",
        "NotPossible",
        "ReservationNeeded"
      ]
    },
    "AllowedPetsTypeEnum": {
      "title": "AllowedPetsTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "Allowed",
        "AllowedOnRequest",
        "NotAllowed"
      ]
    },
    "FeetaxTypeEnum": {
      "title": "FeetaxTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "TAXABLE",
        "NOT_TAXABLE"
      ]
    },
    "FeeUnitEnum": {
      "title": "FeeUnitEnum",
      "description": "",
      "type": "string",
      "enum": [
        "PER_STAY",
        "PER_DAY",
        "PER_PERSON",
        "PER_DAY_PER_PERSON",
        "PER_DAY_PER_PERSON_EXTRA"
      ]
    },
    "FeeEntityTypeEnum": {
      "title": "FeeEntityTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "MANDATORY",
        "OPTIONAL",
        "MANDATORY_PAL"
      ]
    },
    "FeeTypeEnum": {
      "title": "FeeTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "GENERAL",
        "PET_FEE",
        "DEPOSIT"
      ]
    },
    "TaxisTypeEnum": {
      "title": "TaxisTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "SalesTaxIncluded",
        "SalesTaxExcluded"
      ]
    },
    "WeekendParamEnum": {
      "title": "WeekendParamEnum",
      "description": "",
      "type": "string",
      "enum": [
        "DAYS_OF_WEEKEND_SAT_SUN",
        "DAYS_OF_WEEKEND_FRI_SAT",
        "DAYS_OF_WEEKEND_FRI_SAT_SUN",
        "DAYS_OF_WEEKEND_THU_FRI_SAT",
        "DAYS_OF_WEEKEND_THU_FRI_SAT_SUN"
      ]
    },
    "YieldmodifierEnum": {
      "title": "YieldmodifierEnum",
      "description": "",
      "type": "string",
      "enum": [
        "INCREASE_PERCENT",
        "DECREASE_PERCENT",
        "INCREASE_AMOUNT",
        "DECREASE_AMOUNT"
      ]
    },
    "FeeValueTypeEnum": {
      "title": "FeeValueTypeEnum",
      "description": "Value Type {FLAT, PERCENT}",
      "type": "string",
      "enum": [
        "FLAT",
        "PERCENT"
      ]
    },
    "ChannelABBEnum": {
      "title": "ChannelABBEnum",
      "description": "",
      "type": "string",
      "enum": [
        "BKG",
        "ABB",
        "EXP",
        "EXP_HC",
        "HAC"
      ]
    },
    "SpaceUnitEnum": {
      "title": "SpaceUnitEnum",
      "description": "",
      "type": "string",
      "enum": [
        "SQ_M",
        "SQ_FT"
      ]
    },
    "UserEnum": {
      "title": "UserEnum",
      "description": "",
      "type": "string",
      "enum": [
        "PROPERTY_MANAGER",
        "GUEST"
      ]
    },
    "RequestToBookTypeEnum": {
      "title": "RequestToBookTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "ACCEPT",
        "DENY"
      ]
    },
    "RequestToBookDeclineReasonTypeEnum": {
      "title": "RequestToBookDeclineReasonTypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "DATES_NOT_AVAILABLE",
        "NOT_A_GOOD_FIT",
        "WAITING_FOR_BETTER_RESERVATION",
        "NOT_COMFORTABLE"
      ]
    },
    "RequesttoBookTestActionEnum": {
      "title": "RequesttoBookTestActionEnum",
      "description": "Allowed values for request to book Test action",
      "type": "string",
      "enum": [
        "RESERVATION_REQUEST_VOIDED",
        "RESERVATION_REQUEST"
      ]
    },
    "NearbyAmenitiesEnum": {
      "title": "NearbyAmenitiesEnum",
      "description": "List of allowed Nearby Amenities codes",
      "type": "string",
      "enum": [
        "ACC1",
        "ACC203",
        "ACC65",
        "HAC199",
        "RST5"
      ]
    },
    "PropertyTypesEnum": {
      "title": "PropertyTypesEnum",
      "description": "",
      "type": "string",
      "enum": [
        "PCT101",
        "PCT102",
        "PCT103",
        "PCT104",
        "PCT105",
        "PCT106",
        "PCT107",
        "PCT108",
        "PCT109",
        "PCT110",
        "PCT111",
        "PCT112",
        "PCT113",
        "PCT114",
        "PCT115",
        "PCT116",
        "PCT117",
        "PCT118",
        "PCT119",
        "PCT12",
        "PCT120",
        "PCT121",
        "PCT122",
        "PCT123",
        "PCT124",
        "PCT125",
        "PCT126",
        "PCT127",
        "PCT128",
        "PCT14",
        "PCT15",
        "PCT16",
        "PCT18",
        "PCT19",
        "PCT20",
        "PCT21",
        "PCT22",
        "PCT23",
        "PCT25",
        "PCT26",
        "PCT27",
        "PCT28",
        "PCT29",
        "PCT3",
        "PCT30",
        "PCT31",
        "PCT32",
        "PCT33",
        "PCT34",
        "PCT35",
        "PCT36",
        "PCT37",
        "PCT4",
        "PCT40",
        "PCT41",
        "PCT44",
        "PCT45",
        "PCT46",
        "PCT5",
        "PCT50",
        "PCT51",
        "PCT52",
        "PCT6",
        "PCT7",
        "PCT8"
      ]
    },
    "AmenityTypesEnum": {
      "title": "AmenityTypesEnum",
      "description": "",
      "type": "string",
      "enum": [
        "ACC111",
        "ACC112",
        "ACC113",
        "ACC114",
        "ACC115",
        "ACC116",
        "ACC117",
        "ACC118",
        "ACC119",
        "ACC120",
        "ACC123",
        "ACC14",
        "ACC24",
        "ACC25",
        "ACC27",
        "ACC28",
        "ACC29",
        "ACC31",
        "ACC32",
        "ACC33",
        "ACC39",
        "ACC40",
        "ACC41",
        "ACC42",
        "ACC45",
        "ACC47",
        "ACC5",
        "ACC50",
        "ACC54",
        "ACC55",
        "ACC56",
        "ACC57",
        "ACC59",
        "ACC73",
        "ACC74",
        "ACC82",
        "ACC90",
        "ACC95",
        "HAC1",
        "HAC101",
        "HAC116",
        "HAC122",
        "HAC14",
        "HAC149",
        "HAC15",
        "HAC154",
        "HAC156",
        "HAC157",
        "HAC159",
        "HAC16",
        "HAC160",
        "HAC165",
        "HAC168",
        "HAC173",
        "HAC176",
        "HAC186",
        "HAC193",
        "HAC195",
        "HAC196",
        "HAC197",
        "HAC198",
        "HAC202",
        "HAC204",
        "HAC21",
        "HAC22",
        "HAC226",
        "HAC228",
        "HAC230",
        "HAC231",
        "HAC232",
        "HAC233",
        "HAC234",
        "HAC236",
        "HAC237",
        "HAC238",
        "HAC239",
        "HAC241",
        "HAC242",
        "HAC246",
        "HAC25",
        "HAC254",
        "HAC26",
        "HAC262",
        "HAC265",
        "HAC269",
        "HAC272",
        "HAC273",
        "HAC280",
        "HAC282",
        "HAC283",
        "HAC29",
        "HAC292",
        "HAC301",
        "HAC309",
        "HAC310",
        "HAC312",
        "HAC316",
        "HAC32",
        "HAC327",
        "HAC33",
        "HAC334",
        "HAC34",
        "HAC342",
        "HAC345",
        "HAC348",
        "HAC36",
        "HAC37",
        "HAC41",
        "HAC42",
        "HAC44",
        "HAC45",
        "HAC49",
        "HAC5",
        "HAC50",
        "HAC5033",
        "HAC51",
        "HAC53",
        "HAC54",
        "HAC55",
        "HAC60",
        "HAC6002",
        "HAC6008",
        "HAC6010",
        "HAC6013",
        "HAC6014",
        "HAC6019",
        "HAC6020",
        "HAC6024",
        "HAC6025",
        "HAC6026",
        "HAC6027",
        "HAC6028",
        "HAC6029",
        "HAC6030",
        "HAC6031",
        "HAC6032",
        "HAC6033",
        "HAC6034",
        "HAC6035",
        "HAC6036",
        "HAC6037",
        "HAC6038",
        "HAC6039",
        "HAC6040",
        "HAC6041",
        "HAC6042",
        "HAC6043",
        "HAC6044",
        "HAC6045",
        "HAC6046",
        "HAC6047",
        "HAC6048",
        "HAC6049",
        "HAC6050",
        "HAC6051",
        "HAC6052",
        "HAC6053",
        "HAC6054",
        "HAC6055",
        "HAC6056",
        "HAC6057",
        "HAC6058",
        "HAC6059",
        "HAC6060",
        "HAC6061",
        "HAC6062",
        "HAC6063",
        "HAC6064",
        "HAC6065",
        "HAC6066",
        "HAC6067",
        "HAC6068",
        "HAC6069",
        "HAC6070",
        "HAC6072",
        "HAC6073",
        "HAC6074",
        "HAC6075",
        "HAC6076",
        "HAC6077",
        "HAC6078",
        "HAC6079",
        "HAC6080",
        "HAC6081",
        "HAC6082",
        "HAC6084",
        "HAC6085",
        "HAC6086",
        "HAC6087",
        "HAC6088",
        "HAC6089",
        "HAC6090",
        "HAC6091",
        "HAC6092",
        "HAC6093",
        "HAC6095",
        "HAC6096",
        "HAC6097",
        "HAC6098",
        "HAC6099",
        "HAC61",
        "HAC6100",
        "HAC6101",
        "HAC6102",
        "HAC6103",
        "HAC6104",
        "HAC6105",
        "HAC6106",
        "HAC6107",
        "HAC6108",
        "HAC6109",
        "HAC6110",
        "HAC6111",
        "HAC6113",
        "HAC6114",
        "HAC6115",
        "HAC6116",
        "HAC6117",
        "HAC6118",
        "HAC6119",
        "HAC6120",
        "HAC6121",
        "HAC6122",
        "HAC6123",
        "HAC6124",
        "HAC6125",
        "HAC6126",
        "HAC6127",
        "HAC6128",
        "HAC6129",
        "HAC6130",
        "HAC6131",
        "HAC6132",
        "HAC6133",
        "HAC6134",
        "HAC6135",
        "HAC6136",
        "HAC6137",
        "HAC6138",
        "HAC62",
        "HAC66",
        "HAC7",
        "HAC71",
        "HAC76",
        "HAC77",
        "HAC78",
        "HAC79",
        "HAC8",
        "HAC81",
        "HAC83",
        "HAC86",
        "HAC9",
        "HAC91",
        "HAC94",
        "HAC96",
        "HAC97",
        "HAC98",
        "RMA1",
        "RMA10",
        "RMA100",
        "RMA102",
        "RMA103",
        "RMA104",
        "RMA105",
        "RMA107",
        "RMA108",
        "RMA11",
        "RMA111",
        "RMA113",
        "RMA115",
        "RMA117",
        "RMA119",
        "RMA126",
        "RMA127",
        "RMA129",
        "RMA13",
        "RMA133",
        "RMA135",
        "RMA138",
        "RMA139",
        "RMA14",
        "RMA141",
        "RMA142",
        "RMA143",
        "RMA144",
        "RMA146",
        "RMA147",
        "RMA149",
        "RMA15",
        "RMA151",
        "RMA155",
        "RMA157",
        "RMA158",
        "RMA16",
        "RMA161",
        "RMA162",
        "RMA163",
        "RMA164",
        "RMA166",
        "RMA167",
        "RMA170",
        "RMA175",
        "RMA18",
        "RMA186",
        "RMA19",
        "RMA190",
        "RMA191",
        "RMA192",
        "RMA193",
        "RMA194",
        "RMA195",
        "RMA2",
        "RMA20",
        "RMA200",
        "RMA201",
        "RMA203",
        "RMA204",
        "RMA205",
        "RMA207",
        "RMA21",
        "RMA210",
        "RMA214",
        "RMA217",
        "RMA218",
        "RMA22",
        "RMA220",
        "RMA223",
        "RMA224",
        "RMA227",
        "RMA228",
        "RMA230",
        "RMA231",
        "RMA234",
        "RMA242",
        "RMA245",
        "RMA246",
        "RMA25",
        "RMA251",
        "RMA254",
        "RMA256",
        "RMA258",
        "RMA259",
        "RMA26",
        "RMA260",
        "RMA262",
        "RMA265",
        "RMA268",
        "RMA269",
        "RMA270",
        "RMA271",
        "RMA273",
        "RMA276",
        "RMA279",
        "RMA28",
        "RMA280",
        "RMA29",
        "RMA3",
        "RMA32",
        "RMA33",
        "RMA38",
        "RMA41",
        "RMA45",
        "RMA46",
        "RMA47",
        "RMA49",
        "RMA5",
        "RMA50",
        "RMA5005",
        "RMA5020",
        "RMA5085",
        "RMA5086",
        "RMA5091",
        "RMA5126",
        "RMA5145",
        "RMA55",
        "RMA56",
        "RMA57",
        "RMA58",
        "RMA59",
        "RMA6",
        "RMA60",
        "RMA6001",
        "RMA6003",
        "RMA6004",
        "RMA6005",
        "RMA6010",
        "RMA6012",
        "RMA6013",
        "RMA6017",
        "RMA6018",
        "RMA6021",
        "RMA6027",
        "RMA6028",
        "RMA6029",
        "RMA6030",
        "RMA6031",
        "RMA6032",
        "RMA6033",
        "RMA6034",
        "RMA6035",
        "RMA6036",
        "RMA6037",
        "RMA6038",
        "RMA6039",
        "RMA6040",
        "RMA6042",
        "RMA6045",
        "RMA6046",
        "RMA6051",
        "RMA6052",
        "RMA6053",
        "RMA6054",
        "RMA6055",
        "RMA6056",
        "RMA6057",
        "RMA6058",
        "RMA6059",
        "RMA6060",
        "RMA6061",
        "RMA6062",
        "RMA6063",
        "RMA6064",
        "RMA6065",
        "RMA6066",
        "RMA6067",
        "RMA6068",
        "RMA6071",
        "RMA6072",
        "RMA6073",
        "RMA6074",
        "RMA6075",
        "RMA6076",
        "RMA6077",
        "RMA6078",
        "RMA6079",
        "RMA6080",
        "RMA6081",
        "RMA6082",
        "RMA6083",
        "RMA6084",
        "RMA6085",
        "RMA6086",
        "RMA6087",
        "RMA6088",
        "RMA6089",
        "RMA6090",
        "RMA6091",
        "RMA6092",
        "RMA6093",
        "RMA6094",
        "RMA6095",
        "RMA6096",
        "RMA6097",
        "RMA6098",
        "RMA6099",
        "RMA61",
        "RMA6100",
        "RMA6101",
        "RMA6102",
        "RMA6103",
        "RMA6104",
        "RMA6105",
        "RMA6106",
        "RMA6107",
        "RMA6108",
        "RMA6109",
        "RMA6110",
        "RMA6111",
        "RMA6112",
        "RMA6113",
        "RMA6114",
        "RMA6115",
        "RMA6116",
        "RMA6117",
        "RMA6118",
        "RMA6119",
        "RMA6120",
        "RMA6121",
        "RMA6122",
        "RMA6123",
        "RMA6124",
        "RMA6125",
        "RMA6126",
        "RMA6127",
        "RMA6128",
        "RMA6129",
        "RMA6130",
        "RMA6131",
        "RMA6132",
        "RMA6133",
        "RMA6134",
        "RMA6135",
        "RMA6136",
        "RMA6137",
        "RMA6138",
        "RMA6139",
        "RMA6140",
        "RMA6141",
        "RMA6142",
        "RMA6144",
        "RMA6145",
        "RMA6146",
        "RMA6147",
        "RMA6148",
        "RMA6149",
        "RMA6150",
        "RMA6151",
        "RMA6152",
        "RMA6153",
        "RMA6154",
        "RMA6155",
        "RMA6156",
        "RMA6157",
        "RMA6158",
        "RMA63",
        "RMA64",
        "RMA67",
        "RMA68",
        "RMA69",
        "RMA7",
        "RMA72",
        "RMA77",
        "RMA78",
        "RMA8",
        "RMA80",
        "RMA81",
        "RMA85",
        "RMA86",
        "RMA88",
        "RMA89",
        "RMA9",
        "RMA91",
        "RMA92",
        "RMA94",
        "RMA97",
        "RMA98",
        "RMA99",
        "RST101",
        "RST104",
        "RST105",
        "RST108",
        "RST111",
        "RST112",
        "RST116",
        "RST117",
        "RST120",
        "RST123",
        "RST127",
        "RST129",
        "RST13",
        "RST133",
        "RST134",
        "RST137",
        "RST14",
        "RST149",
        "RST151",
        "RST156",
        "RST157",
        "RST160",
        "RST161",
        "RST169",
        "RST170",
        "RST171",
        "RST172",
        "RST173",
        "RST174",
        "RST175",
        "RST176",
        "RST177",
        "RST178",
        "RST179",
        "RST180",
        "RST181",
        "RST182",
        "RST183",
        "RST184",
        "RST185",
        "RST186",
        "RST187",
        "RST20",
        "RST25",
        "RST34",
        "RST35",
        "RST4",
        "RST5028",
        "RST60",
        "RST63",
        "RST65",
        "RST67",
        "RST68",
        "RST7",
        "RST71",
        "RST73",
        "RST74",
        "RST79",
        "RST80",
        "RST82",
        "RST86",
        "RST87",
        "RST9",
        "RST92",
        "RST96"
      ]
    },
    "BedConfigurationEnum": {
      "title": "BedConfigurationEnum",
      "description": "",
      "type": "string",
      "enum": [
        "RMA58",
        "RMA86",
        "RMA102",
        "RMA113",
        "RMA200",
        "RMA201",
        "RMA203",
        "RMA6032",
        "RMA33",
        "RMA26",
        "RMA6038",
        "RMA6118",
        "RMA6119",
        "RMA6120",
        "RMA6121",
        "RMA6122"
      ]
    },
    "ImageTagsEnum": {
      "title": "ImageTagsEnum",
      "description": "",
      "example": 1,
      "type": "integer",
      "format": "int32",
      "enum": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "10",
        "43",
        "11",
        "13",
        "14",
        "37",
        "41",
        "42",
        "50",
        "55",
        "61",
        "70",
        "74",
        "81",
        "82",
        "87",
        "89",
        "90",
        "94",
        "95",
        "96",
        "97",
        "100",
        "102",
        "103",
        "104",
        "106",
        "107",
        "141",
        "108",
        "112",
        "113",
        "114",
        "115",
        "116",
        "124",
        "125",
        "128",
        "131",
        "137",
        "133",
        "134",
        "143",
        "153",
        "154",
        "155",
        "156",
        "157",
        "158",
        "159",
        "160",
        "161",
        "164",
        "165",
        "167",
        "172",
        "173",
        "177",
        "178",
        "179",
        "182",
        "183",
        "184",
        "185",
        "186",
        "187",
        "188",
        "189",
        "190",
        "191",
        "192",
        "193",
        "194",
        "197",
        "198",
        "199",
        "204",
        "205",
        "240",
        "241",
        "242",
        "245",
        "246",
        "247",
        "248",
        "249",
        "250",
        "251",
        "252",
        "253",
        "254",
        "255",
        "256",
        "257",
        "258",
        "259",
        "260",
        "261",
        "262",
        "263",
        "264",
        "265",
        "266",
        "267",
        "268",
        "269",
        "270",
        "271",
        "272",
        "273",
        "274",
        "275",
        "276",
        "277",
        "278",
        "279",
        "280",
        "281",
        "282",
        "283",
        "284",
        "285",
        "286",
        "287",
        "288",
        "289",
        "290",
        "291"
      ]
    },
    "Reservationnotificationobject": {
      "title": "Reservationnotificationobject",
      "description": "",
      "example": {
        "reservationId": "107",
        "productId": "1234816374",
        "supplierId": "3731837",
        "agentName": "TestAndrew",
        "confirmationId": "ZSC213123123A",
        "customerName": "dasdasd",
        "fromDate": "2019-05-17",
        "toDate": "2019-05-23",
        "adult": 2,
        "child": 0,
        "address": "asdasd",
        "city": "asdasd",
        "zip": "asdasd",
        "email": "andrewtesttest222@gmail.com",
        "phone": "4234234",
        "notes": "customer test message",
        "creditCardType": "1",
        "creditCardNumber": "4111111111111111",
        "creditCardExpirationMonth": "12",
        "creditCardExpirationYear": "2023",
        "creditCardCid": "123",
        "total": 652.0,
        "fees": [
          {
            "id": "937-4",
            "name": "Cleaning Fee",
            "value": 110.0
          },
          {
            "id": "355",
            "name": "Limited Damage Waiver",
            "value": 60.0
          },
          {
            "id": "1298",
            "name": "Processing Fee",
            "value": 40.0
          }
        ],
        "taxes": [
          {
            "id": "22",
            "name": "State of Florida-Lake County State Tax",
            "value": 5.0
          },
          {
            "id": "23",
            "name": "Tax-Lake County County Tax",
            "value": 15.0
          }
        ],
        "newState": "Provisional",
        "commission": {
          "channelCommission": 10.0,
          "bpCommission": 12.0
        },
        "rate": {
          "originalRackRate": 400.0,
          "netRate": 400.0,
          "newPublishedRackRate": 422.0
        },
        "country": "US",
        "state": "asdasda",
        "uniqueKey": "f207c4c029cb1ea1"
      },
      "type": "object",
      "properties": {
        "reservationId": {
          "description": "Id of the reservation in BookingPal",
          "example": "107",
          "type": "string"
        },
        "productId": {
          "description": "Id of the product in BookingPal",
          "example": "1234816374",
          "type": "string"
        },
        "supplierId": {
          "description": "Id of the property manager",
          "example": "3731837",
          "type": "string"
        },
        "agentName": {
          "description": "Agent name/Channel name",
          "example": "TestAndrew",
          "type": "string"
        },
        "confirmationId": {
          "description": "Channel confirmation code",
          "example": "dasdasd",
          "type": "string"
        },
        "uniqueKey": {
          "description": "Unique code to identify that the request is from BookingPal. This value is unique for every PMS (and it will be different in different environments).",
          "type": "string"
        },
        "newState": {
          "description": "Reservation state",
          "type": "string"
        },
        "customerName": {
          "description": "Guest full name (in format firstName, lastName)",
          "example": "dasdasd",
          "type": "string"
        },
        "fromDate": {
          "description": "Reservation date from. Date is in format \"yyyy-MM-dd\"",
          "example": "2019-05-17",
          "type": "string",
          "format": "date"
        },
        "toDate": {
          "description": "Reservation date to. Date is in format \"yyyy-MM-dd\"",
          "example": "2019-05-23",
          "type": "string",
          "format": "date"
        },
        "adult": {
          "description": "number of adults",
          "example": 2,
          "type": "integer",
          "format": "int32"
        },
        "child": {
          "description": "number of children",
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "address": {
          "description": "Guest address",
          "example": "asdasd",
          "type": "string"
        },
        "city": {
          "description": "Guest city",
          "example": "asdasd",
          "type": "string"
        },
        "zip": {
          "description": "Guest zip code",
          "example": "asdasd",
          "type": "string"
        },
        "country": {
          "description": "Guest country",
          "example": "asdasd",
          "type": "string"
        },
        "state": {
          "description": "Guest state",
          "example": "asdasd",
          "type": "string"
        },
        "email": {
          "description": "Guest email",
          "example": "andrewtesttest222@gmail.com",
          "type": "string"
        },
        "phone": {
          "description": "Guest phone",
          "example": "4234234",
          "type": "string"
        },
        "notes": {
          "description": "Guest notes",
          "example": "customer test message",
          "type": "string"
        },
        "creditCardType": {
          "description": "Credit card type",
          "example": "1",
          "type": "string"
        },
        "creditCardNumber": {
          "description": "Credit card number",
          "example": "23123123123213123",
          "type": "string"
        },
        "creditCardExpirationMonth": {
          "description": "Credit card expiration month",
          "example": "12",
          "type": "string"
        },
        "creditCardExpirationYear": {
          "description": "Credit card expiration yea",
          "example": "2023",
          "type": "string"
        },
        "creditCardCid": {
          "description": "Credit card cid",
          "example": "123",
          "type": "string"
        },
        "total": {
          "description": "Best available rate (This is the total value that guests will pay, including rate, fees, taxes, and all commissions. )",
          "type": "number",
          "format": "double"
        },
        "fees": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReservationFeeNotificationModel"
          }
        },
        "taxes": {
          "description": "List of models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReservationTaxNotificationModel"
          }
        },
        "commission": {
          "$ref": "#/definitions/ReservationCommissionsNotificationModel"
        },
        "rate": {
          "$ref": "#/definitions/ReservationRateNotifcationModel"
        }
      },
      "required": [
        "reservationId",
        "productId",
        "supplierId",
        "agentName",
        "confirmationId",
        "uniqueKey",
        "newState",
        "customerName",
        "fromDate",
        "toDate",
        "adult",
        "child",
        "email",
        "total",
        "fees",
        "taxes",
        "commission",
        "rate"
      ]
    },
    "ReservationpushResponse": {
      "title": "ReservationpushResponse",
      "description": "This is response which the BookingPal expect to get on from PMS on push POST request for create/cancel reservation",
      "example": {
        "altId": "45717",
        "is_error": false,
        "code": "",
        "message": "Reservation is processed.",
        "transactionState": "Accepted"
      },
      "type": "object",
      "properties": {
        "altId": {
          "description": "Id of reservation in your system",
          "example": "45717",
          "type": "string"
        },
        "is_error": {
          "description": "Did you have error during processing of request (true) or not (false)",
          "example": false,
          "type": "boolean",
          "default": "false"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "message": {
          "description": "Text info message. If you have any error please put here detail message.",
          "example": "Reservation is processed.",
          "type": "string"
        },
        "transactionState": {
          "description": "This field should be returned only if you are processing payment. With information did you process payment or not. Allowed values [Accepted, Failed].",
          "type": "string"
        }
      },
      "required": [
        "altId",
        "is_error",
        "code",
        "message"
      ]
    },
    "ReservationFeeNotificationModel": {
      "title": "ReservationFeeNotificationModel",
      "description": "Model used for fees in reservation push notification",
      "example": {
        "id": "937-4",
        "name": "Cleaning Fee",
        "value": 110.0
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "Fee altID (alt ID which PMS sent over API)",
          "example": "937-4",
          "type": "string"
        },
        "name": {
          "description": "Fee name",
          "example": "Cleaning Fee",
          "type": "string"
        },
        "value": {
          "description": "Fee value",
          "example": 110.0,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "ReservationTaxNotificationModel": {
      "title": "ReservationTaxNotificationModel",
      "description": "Model used for taxes in reservation push notification",
      "example": {
        "id": "22",
        "name": "State of Florida-Lake County State Tax",
        "value": 5.0
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "Tax altID (alt ID which PMS sent over API)",
          "example": "22",
          "type": "string"
        },
        "name": {
          "description": "Tax name",
          "example": "State of Florida-Lake County State Tax",
          "type": "string"
        },
        "value": {
          "description": "Tax value",
          "example": 5.0,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "ReservationRateNotifcationModel": {
      "title": "ReservationRateNotifcationModel",
      "description": "",
      "example": {
        "originalRackRate": 400.0,
        "netRate": 400.0,
        "newPublishedRackRate": 422.0
      },
      "type": "object",
      "properties": {
        "originalRackRate": {
          "description": "Original rack rate. Rate received from PMS (rate without additional channel commission or any additional markup)",
          "example": 400.0,
          "type": "number",
          "format": "double"
        },
        "netRate": {
          "description": "Net rate (rate which PM will get - so without any additional commissions).",
          "example": 400.0,
          "type": "number",
          "format": "double"
        },
        "newPublishedRackRate": {
          "description": "New published rack rate (rate which guest paid - rate with all commissions).",
          "example": 422.0,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "originalRackRate",
        "netRate",
        "newPublishedRackRate"
      ]
    },
    "ReservationCommissionsNotificationModel": {
      "title": "ReservationCommissionsNotificationModel",
      "description": "",
      "example": {
        "channelCommission": 10.0,
        "bpCommission": 12.0
      },
      "type": "object",
      "properties": {
        "channelCommission": {
          "description": "Channel commission",
          "example": 10.0,
          "type": "number",
          "format": "double"
        },
        "bpCommission": {
          "description": "BookingPal commission",
          "example": 10.0,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "channelCommission",
        "bpCommission"
      ]
    },
    "CancelReservationnotificationobject": {
      "title": "CancelReservationnotificationobject",
      "description": "",
      "example": {
        "reservationId": "7534",
        "productId": "12969",
        "supplierId": 161637256,
        "agentName": "Test Channel m9iPCxJ6h3",
        "confirmationId": "ZSC213123123A",
        "customerName": "Michael, Johnson",
        "fromDate": "2020-02-26",
        "toDate": "2020-02-27",
        "adult": 1,
        "child": 0,
        "email": "autoorlu@atvc.gen",
        "phone": "+384135213",
        "notes": "test notes",
        "total": 28.16,
        "uniqueKey": "227317348c176f71a502d2c65c2f75d3",
        "newState": "Cancelled"
      },
      "type": "object",
      "properties": {
        "reservationId": {
          "description": "Id of the reservation in BookingPal",
          "example": "107",
          "type": "string"
        },
        "productId": {
          "description": "Id of the product in BookingPal",
          "example": "1234816374",
          "type": "string"
        },
        "supplierId": {
          "description": "Id of the property manager",
          "example": 3731837,
          "type": "integer",
          "format": "int32"
        },
        "agentName": {
          "description": "Agent name/Channel name",
          "example": "TestAndrew",
          "type": "string"
        },
        "confirmationId": {
          "description": "Channel confirmation code",
          "example": "dasdasd",
          "type": "string"
        },
        "uniqueKey": {
          "description": "Unique code to identify that the request is from BookingPal. This value is unique for every PMS (and it will be different in different environments).",
          "type": "string"
        },
        "newState": {
          "description": "It will always be \"Cancelled\" in this request",
          "type": "string"
        },
        "customerName": {
          "description": "Guest full name (in format firstName, lastName)",
          "example": "dasdasd",
          "type": "string"
        },
        "fromDate": {
          "description": "Reservation date from. Date is in format \"yyyy-MM-dd\"",
          "example": "2019-05-17",
          "type": "string",
          "format": "date"
        },
        "toDate": {
          "description": "Reservation date to. Date is in format \"yyyy-MM-dd\"",
          "example": "2019-05-23",
          "type": "string",
          "format": "date"
        },
        "adult": {
          "description": "Number of adults",
          "example": 2,
          "type": "integer",
          "format": "int32"
        },
        "child": {
          "description": "Number of children",
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "description": "Guest email",
          "example": "andrewtesttest222@gmail.com",
          "type": "string"
        },
        "phone": {
          "description": "Guest phone",
          "example": "4234234",
          "type": "string"
        },
        "notes": {
          "description": "Guest notes",
          "example": "customer test message",
          "type": "string"
        },
        "creditCardType": {
          "description": "Credit card type",
          "example": "1",
          "type": "string"
        },
        "total": {
          "description": "Best available rate (This is the total value that guests will pay, including rate, fees, taxes, and all commissions. )",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "reservationId",
        "productId",
        "supplierId",
        "agentName",
        "confirmationId",
        "uniqueKey",
        "newState",
        "customerName",
        "fromDate",
        "toDate",
        "adult",
        "child",
        "email",
        "total"
      ]
    },
    "ReservationGetResponse": {
      "title": "ReservationGetResponse",
      "description": "Response for Get reservation calls",
      "type": "object",
      "properties": {
        "message": {
          "description": "text info message",
          "type": "string"
        },
        "errorMessage": {
          "description": "List of all errors occurred.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_error": {
          "description": "Is error (default = false)",
          "type": "boolean"
        },
        "code": {
          "description": "Code of message",
          "type": "string"
        },
        "data": {
          "description": "List of Reservation models",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reservationnotificationobject"
          }
        }
      },
      "required": [
        "message",
        "errorMessage",
        "is_error",
        "code",
        "data"
      ]
    },
    "ValidationAsynchronouspushmessagerequest": {
      "title": "ValidationAsynchronouspushmessagerequest",
      "description": "Request for validation messages which BookingPal push asynchronous (webhooks request)",
      "example": {
        "supplierId": 636753,
        "type": "BP_VALIDATION",
        "validation": [
          {
            "productId": 291358,
            "validationErrors": "null",
            "valid": true
          },
          {
            "productId": 291356,
            "validationErrors": "noPrice;",
            "valid": false
          }
        ]
      },
      "type": "object",
      "properties": {
        "supplierId": {
          "description": "Id of supplier in BookingPal",
          "example": 636753,
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/AsynchronouspushmessagetypeEnum"
        },
        "validation": {
          "description": "Validation Model",
          "example": [
            {
              "productId": 291358,
              "validationErrors": "null",
              "valid": true
            },
            {
              "productId": 291356,
              "validationErrors": "noPrice;",
              "valid": false
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/AsynchronousValidationmodel"
          }
        }
      },
      "required": [
        "supplierId",
        "type",
        "validation"
      ]
    },
    "AsynchronouspushmessagetypeEnum": {
      "title": "AsynchronouspushmessagetypeEnum",
      "description": "",
      "type": "string",
      "enum": [
        "BP_VALIDATION"
      ]
    },
    "AsynchronousValidationmodel": {
      "title": "AsynchronousValidationmodel",
      "description": "Model for Validation messages",
      "example": {
        "productId": 291356,
        "validationErrors": "noPrice;",
        "valid": false
      },
      "type": "object",
      "properties": {
        "productId": {
          "description": "Id of product in BookingPal",
          "example": 1234959952,
          "type": "integer",
          "format": "int32"
        },
        "validationErrors": {
          "description": "Error message - explanation what are problems if validation failed.",
          "type": "string"
        },
        "valid": {
          "description": "Is product valid",
          "type": "boolean"
        }
      },
      "required": [
        "productId",
        "valid"
      ]
    },
    "RequestToBookRequestModel": {
      "title": "RequestToBookRequestModel",
      "description": "Model for request to book API request",
      "example": {
        "rezcasterNotificationRequest": {
          "reservationId": "107",
          "productId": "1234816374",
          "supplierId": "3731837",
          "agentName": "TestAndrew",
          "confirmationId": "ZSC213123123A",
          "customerName": "dasdasd",
          "fromDate": "2019-05-17",
          "toDate": "2019-05-23",
          "adult": 2,
          "child": 0,
          "address": "asdasd",
          "city": "asdasd",
          "zip": "asdasd",
          "email": "andrewtesttest222@gmail.com",
          "phone": "4234234",
          "notes": "customer test message",
          "creditCardType": "1",
          "creditCardNumber": "4111111111111111",
          "creditCardExpirationMonth": "12",
          "creditCardExpirationYear": "2023",
          "creditCardCid": "123",
          "total": 652.0,
          "fees": [
            {
              "id": "937-4",
              "name": "Cleaning Fee",
              "value": 110.0
            },
            {
              "id": "355",
              "name": "Limited Damage Waiver",
              "value": 60.0
            },
            {
              "id": "1298",
              "name": "Processing Fee",
              "value": 40.0
            }
          ],
          "taxes": [
            {
              "id": "22",
              "name": "State of Florida-Lake County State Tax",
              "value": 5.0
            },
            {
              "id": "23",
              "name": "Tax-Lake County County Tax",
              "value": 15.0
            }
          ],
          "newState": "Provisional",
          "commission": {
            "channelCommission": 10.0,
            "bpCommission": 12.0
          },
          "rate": {
            "originalRackRate": 400.0,
            "netRate": 400.0,
            "newPublishedRackRate": 422.0
          },
          "country": "US",
          "state": "asdasda",
          "uniqueKey": "f207c4c029cb1ea1"
        },
        "action": "RESERVATION_REQUEST",
        "reservationId": 1234561234,
        "expires_at": "2020-03-17",
        "messageToHost": "Test"
      },
      "type": "object",
      "properties": {
        "rezcasterNotificationRequest": {
          "$ref": "#/definitions/Reservationnotificationobject"
        },
        "action": {
          "description": "RESERVATION_REQUEST",
          "example": "RESERVATION_REQUEST",
          "type": "string"
        },
        "reservationId": {
          "description": "ID of reservation in BookingPal",
          "type": "integer",
          "format": "int32"
        },
        "messageToHost": {
          "description": "Message from Guest to host",
          "type": "string"
        },
        "expires_at": {
          "description": "expires time. Date is in format \"yyyy-MM-dd\"",
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "rezcasterNotificationRequest",
        "action",
        "reservationId",
        "expires_at"
      ]
    },
    "RequestToBookCancelRequestModel": {
      "title": "RequestToBookCancelRequestModel",
      "description": "Model for request to book cancel API request",
      "example": {
        "action": "RESERVATION_REQUEST_VOIDED",
        "reservationId": 12345612345
      },
      "type": "object",
      "properties": {
        "action": {
          "description": "RESERVATION_REQUEST_VOIDED",
          "example": "RESERVATION_REQUEST_VOIDED",
          "type": "string"
        },
        "reservationId": {
          "description": "ID of reservation in BookingPal",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "action",
        "reservationId"
      ]
    },
    "MultiUnitEnum": {
      "title": "MultiUnitEnum",
      "description": "Enum for product multyunit type.",
      "type": "string",
      "enum": [
        "MLT",
        "OWN"
      ]
    }
  },
  "security": [
    {
      "jwt": []
    }
  ],
  "tags": [
    {
      "name": "Authorization"
    },
    {
      "name": "Property Managers",
      "description": "In all requests in this API section you need to use your PMS credentials."
    },
    {
      "name": "Product",
      "description": "Every API call in this section should be with PM credentials. "
    },
    {
      "name": "Images",
      "description": "Every API call in this section should be with PM credentials. \r\n\r\nThis is a list of functions to work with property images. Important note is that upload or delete images will be done over an automatic cron job. So it will be done some time after your call, depending on the number of requests which are waiting before your request.\r\nImportant note: Please make sure to put full URL to image, and to not use some links which will forward our system to another link since images might not be imported. \r\n"
    },
    {
      "name": "Rates and Availability",
      "description": "Every API call in this section should be with PM credentials. "
    },
    {
      "name": "LOS Pricing",
      "description": "Every API call in this section should be with PM credentials. \r\n"
    },
    {
      "name": "Fee and Tax",
      "description": "Every API call in this section should be with PM credentials."
    },
    {
      "name": "Fee and Tax Mandatory at the property level",
      "description": "By default in BookingPal system fees and taxes are required. So if one property does not have at least one fee or tax, the property will be Incomplete and can not be distributed. We already have the possibility to set on Property Manager level (on create / update PM API call) if fees and taxes required. \r\nThese API calls now allow the PMS to set this on property level in the event where you only have some of your properties with taxes and fees and others without. Keep in mind that if you have this setup on property level we will check this setting first before checking at Property Manager level. If you have not set this at property level then we will only check the setup at Property Manager level.\r\nThese API calls should be used with PM credentials.\r\n"
    },
    {
      "name": "Yields",
      "description": "Every API call in this section should be with PM credentials. \r\n\r\nWarning: Do not enable the Yields API if not yet certified. BookingPal will no longer certify new partners on this API.\r\n \r\nIf you are already certified to use the Yields API, no changes are required.\r\n \r\nIf your system requires the modification of a base price, please include any yields in the per night price for the applicable dates. For more advance yields and pricing strategies, please consider using length-of-stay (LOS) pricing.\r\n"
    },
    {
      "name": "Validation"
    },
    {
      "name": "Testing of message API calls",
      "description": "Since API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes weâve  built an additional endpoint with the same API calls where you will be able to test these calls."
    },
    {
      "name": "Messaging"
    },
    {
      "name": "Request To Book",
      "description": "Some channels like Airbnb have an option for guests to use the âRequest to bookâ possibility, where the Property Manager needs to approve or decline the booking within the next 24 hours. If the period expires - the booking will be automatically cancelled by Airbnb. Once this booking request is received from the channel side, it will be forwarded to the PMS over this API by sending a notification to the ârequestToBook'' link, which can be set through the Push notification API. Corresponding dates will not be closed at that point in time and should be kept open. Thereâs a 24 hour window to either accept or avoid the reservation. If this reservation is avoided, it will be cancelled in both the mybookingpal system and on the channel. If the reservation is accepted, that information will be sent to the channel where a new reservation will be created, and then subsequent information sent back over regular New reservation notification flow. Bear in mind that once the requests to book are received (and more importantly, once they are accepted) â dates must remain open in your system, otherwise a real reservation creation will not be possible.\r\n"
    },
    {
      "name": "Push Notification"
    },
    {
      "name": "Reservation Notifications"
    },
    {
      "name": "Asynchronous Push messages",
      "description": ""
    }
  ]
}